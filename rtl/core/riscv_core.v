// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="riscv_core,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.885000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=68,HLS_SYN_DSP=6,HLS_SYN_FF=1926,HLS_SYN_LUT=4311}" *)

module riscv_core (
        ap_clk,
        ap_rst,
        ap_start,
        approx_level_add,
        approx_level_sub,
        approx_level_mul,
        ap_done,
        ap_idle,
        ap_ready
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   [2:0] approx_level_add;
input   [2:0] approx_level_sub;
input   [2:0] approx_level_mul;
output   ap_done;
output   ap_idle;
output   ap_ready;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] PC;
wire    grp_datapath_fu_14_ap_start;
wire    grp_datapath_fu_14_ap_done;
wire    grp_datapath_fu_14_ap_idle;
wire    grp_datapath_fu_14_ap_ready;
wire   [31:0] grp_datapath_fu_14_ap_return;
reg    grp_datapath_fu_14_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [31:0] PC_assign_i_fu_30_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 PC = 32'd0;
#0 grp_datapath_fu_14_ap_start_reg = 1'b0;
end

datapath grp_datapath_fu_14(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_datapath_fu_14_ap_start),
    .approx_level_add(approx_level_add),
    .approx_level_sub(approx_level_sub),
    .approx_level_mul(approx_level_mul),
    .ap_done(grp_datapath_fu_14_ap_done),
    .ap_idle(grp_datapath_fu_14_ap_idle),
    .ap_ready(grp_datapath_fu_14_ap_ready),
    .PC(PC),
    .ap_return(grp_datapath_fu_14_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_datapath_fu_14_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_datapath_fu_14_ap_start_reg <= 1'b1;
        end else if ((grp_datapath_fu_14_ap_ready == 1'b1)) begin
            grp_datapath_fu_14_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_datapath_fu_14_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        PC <= PC_assign_i_fu_30_p2;
    end
end

always @ (*) begin
    if (((grp_datapath_fu_14_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_datapath_fu_14_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_datapath_fu_14_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign PC_assign_i_fu_30_p2 = (PC + grp_datapath_fu_14_ap_return);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign grp_datapath_fu_14_ap_start = grp_datapath_fu_14_ap_start_reg;

endmodule //riscv_core
