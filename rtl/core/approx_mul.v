// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module approx_mul (
        ap_clk,
        ap_rst,
        ap_start,
        approx_level_mul,
        ap_done,
        ap_idle,
        ap_ready,
        opA,
        opB,
        size_op1,
        size_op2,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   [2:0] approx_level_mul;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] opA;
input  [31:0] opB;
input  [7:0] size_op1;
input  [7:0] size_op2;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
//reg [31:0] ap_return;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;

reg   [31:0] ap_return_preg;
reg   [1:0] ap_NS_fsm;

reg   [2:0] approx_level;



wire [31:0] opA_p;
wire [31:0] opB_p;

wire [7:0] size_op1_p;
wire [7:0] size_op2_p;
wire [15:0] size_x;
wire [15:0] size_y;
wire [31:0] size_add;


assign size_op1_p = (ap_start == 1) ? size_op1 : size_op1_p; 
assign size_op2_p = (ap_start == 1) ? size_op2 : size_op2_p; 

assign opA_p = (ap_start == 1) ? opA :opA_p; 
assign opB_p = (ap_start == 1) ? opB :opB_p; 

assign size_x = 2**(size_op1_p)-1;
assign size_y = 2**(size_op2_p)-1;
assign size_add = 2**(size_op1_p + size_op2_p)-1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_return_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end




always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end


always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (posedge ap_clk) begin
    approx_level <= approx_level_mul;
end


Booth_En_Wall_Tree__Mul_16_16 uut (
        .approx_level(approx_level),       
        .size_x(size_x), 
        .size_y(size_y),
        .size_add(size_add),
        .X(opA_p[15:0]), 
        .Y(opB_p[15:0]), 
        .result(ap_return)
);


endmodule //approx_mul
