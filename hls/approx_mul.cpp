// Library = EvoApprox 16x16
// Circuit = mul32x32_098
// Area   (45) = 134
// Delay  (45) = 0.630
// Power  (45) = 0.04
// MAE = 638204913282206336.0
// MRE = 1557.34 %
// WCE LIMIT = 36893488147419103232000
// WCE LIMIT % = 20 %
// EP = 100.0 %
#include <stdint.h>
#include <stdio.h>
#include "datapath.hpp"

uint64_t approx_mul(uint32_t opA, uint32_t opB, uint8_t size_op1, uint8_t size_op2) {
  int A[32] = { 0 };
  A[0] = (opA >> 0) & 0x01;
  A[1] = (opA >> 1) & 0x01;
  A[2] = (opA >> 2) & 0x01;
  A[3] = (opA >> 3) & 0x01;
  A[4] = (opA >> 4) & 0x01;
  A[5] = (opA >> 5) & 0x01;
  A[6] = (opA >> 6) & 0x01;
  A[7] = (opA >> 7) & 0x01;
  A[8] = (opA >> 8) & 0x01;
  A[9] = (opA >> 9) & 0x01;
  A[10] = (opA >> 10) & 0x01;
  A[11] = (opA >> 11) & 0x01;
  A[12] = (opA >> 12) & 0x01;
  A[13] = (opA >> 13) & 0x01;
  A[14] = (opA >> 14) & 0x01;
  A[15] = (opA >> 15) & 0x01;
  A[16] = (opA >> 16) & 0x01;
  A[17] = (opA >> 17) & 0x01;
  A[18] = (opA >> 18) & 0x01;
  A[19] = (opA >> 19) & 0x01;
  A[20] = (opA >> 20) & 0x01;
  A[21] = (opA >> 21) & 0x01;
  A[22] = (opA >> 22) & 0x01;
  A[23] = (opA >> 23) & 0x01;
  A[24] = (opA >> 24) & 0x01;
  A[25] = (opA >> 25) & 0x01;
  A[26] = (opA >> 26) & 0x01;
  A[27] = (opA >> 27) & 0x01;
  A[28] = (opA >> 28) & 0x01;
  A[29] = (opA >> 29) & 0x01;
  A[30] = (opA >> 30) & 0x01;
  A[31] = (opA >> 31) & 0x01;
  int B[32] = { 0 };
  B[0] = (opB >> 0) & 0x01;
  B[1] = (opB >> 1) & 0x01;
  B[2] = (opB >> 2) & 0x01;
  B[3] = (opB >> 3) & 0x01;
  B[4] = (opB >> 4) & 0x01;
  B[5] = (opB >> 5) & 0x01;
  B[6] = (opB >> 6) & 0x01;
  B[7] = (opB >> 7) & 0x01;
  B[8] = (opB >> 8) & 0x01;
  B[9] = (opB >> 9) & 0x01;
  B[10] = (opB >> 10) & 0x01;
  B[11] = (opB >> 11) & 0x01;
  B[12] = (opB >> 12) & 0x01;
  B[13] = (opB >> 13) & 0x01;
  B[14] = (opB >> 14) & 0x01;
  B[15] = (opB >> 15) & 0x01;
  B[16] = (opB >> 16) & 0x01;
  B[17] = (opB >> 17) & 0x01;
  B[18] = (opB >> 18) & 0x01;
  B[19] = (opB >> 19) & 0x01;
  B[20] = (opB >> 20) & 0x01;
  B[21] = (opB >> 21) & 0x01;
  B[22] = (opB >> 22) & 0x01;
  B[23] = (opB >> 23) & 0x01;
  B[24] = (opB >> 24) & 0x01;
  B[25] = (opB >> 25) & 0x01;
  B[26] = (opB >> 26) & 0x01;
  B[27] = (opB >> 27) & 0x01;
  B[28] = (opB >> 28) & 0x01;
  B[29] = (opB >> 29) & 0x01;
  B[30] = (opB >> 30) & 0x01;
  B[31] = (opB >> 31) & 0x01;
  int Z[64] = { 0 };


  int sig_88 = ~ A[29];
  int sig_158 = A[28] & B[31];
  int sig_268 = ~ (A[29] | sig_88);
  int sig_280 = A[30] & B[30];
  int sig_481 = A[29] & B[31];
  int sig_504 = A[31] & B[28];
  int sig_810 = A[31] & B[31];
  int sig_827 = A[31] & B[29];
  int sig_997 = A[29] & B[30];
  int sig_1015 = A[31] & B[30];
  int sig_1058 = A[30] & B[29];
  int sig_1219 = A[30] & B[31];
  int sig_1395 = sig_268 & A[13];
  int sig_1405 = sig_504 | sig_1058;
  int sig_2009 = sig_1405;
  int sig_2089 = sig_1058 & sig_504;
  int sig_2504 = sig_504 & sig_2089;
  int sig_2643 = sig_997 & sig_2009;
  int sig_2740 = sig_827 ^ sig_2089;
  int sig_3272 = sig_2740 ^ sig_280;
  int sig_3383 = sig_280 & sig_2740;
  int sig_3438 = sig_3272 & sig_2643;
  int sig_3452 = sig_2504 | sig_3383;
  int sig_3475 = sig_1015 ^ sig_3452;
  int sig_3476 = ~ sig_158;
  int sig_3718 = sig_1015 & sig_3452;
  int sig_3734 = sig_1219 & sig_3475;
  int sig_3737 = sig_3475 ^ sig_1219;
  int sig_3760 = sig_3272 ^ sig_2643;
  int sig_3974 = sig_3760 ^ sig_481;
  int sig_3992 = sig_481 & sig_3760;
  int sig_4191 = sig_3718 | sig_3734;
  int sig_4402 = sig_3438 | sig_3992;
  int sig_4446 = sig_810 ^ sig_4191;
  int sig_4516 = sig_4191 & sig_1219;
  int sig_4643 = sig_3974;
  int sig_4738 = sig_3737;
  int sig_4880 = sig_4402 & sig_4738;
  int sig_4902 = sig_1395;
  int sig_4905 = sig_4738 ^ sig_4402;
  int sig_4966 = sig_4902 | sig_4880;
  int sig_4985 = ~ sig_268;
  int sig_5149 = sig_3974;
  int sig_5182 = sig_4446 & sig_4966;
  int sig_5193 = sig_4446 ^ sig_4966;
  int sig_5268 = sig_5149 ^ sig_158;
  int sig_5314 = sig_158 & sig_4643;
  int sig_5374 = sig_5268;
  int sig_5393 = sig_4985;
  int sig_5458 = sig_4905 ^ sig_5314;
  int sig_5460 = sig_4905 & sig_5149;
  int sig_5555 = sig_5458 & sig_5268;
  int sig_6329 = sig_5555;
  int sig_6332 = sig_5460 | sig_6329;
  int sig_6333 = ~ sig_5374;
  int sig_6335 = sig_5458 ^ sig_5268;
  int sig_6336 = ~ sig_5393;
  int sig_6337 = sig_4446 & sig_6332;
  int sig_6338 = sig_5193 ^ sig_6332;
  int sig_6339 = sig_5182 | sig_6337;
  int sig_6340 = sig_4516 | sig_6339;

   Z[0] = sig_268;
   Z[1] = A[18];
   Z[2] = sig_5314;
   Z[3] = A[6];
   Z[4] = B[16];
   Z[5] = B[16];
   Z[6] = sig_4985;
   Z[7] = sig_481;
   Z[8] = A[7];
   Z[9] = A[8];
   Z[10] = sig_6329;
   Z[11] = B[3];
   Z[12] = B[20];
   Z[13] = A[16];
   Z[14] = sig_3992;
   Z[15] = sig_504;
   Z[16] = A[25];
   Z[17] = sig_810;
   Z[18] = sig_2009;
   Z[19] = A[19];
   Z[20] = sig_3452;
   Z[21] = A[2];
   Z[22] = A[11];
   Z[23] = B[9];
   Z[24] = sig_3476;
   Z[25] = B[16];
   Z[26] = B[22];
   Z[27] = sig_4902;
   Z[28] = B[7];
   Z[29] = sig_3992;
   Z[30] = sig_1058;
   Z[31] = A[18];
   Z[32] = sig_6338;
   Z[33] = B[8];
   Z[34] = sig_3272;
   Z[35] = B[17];
   Z[36] = B[20];
   Z[37] = A[0];
   Z[38] = sig_6340;
   Z[39] = A[0];
   Z[40] = sig_481;
   Z[41] = sig_280;
   Z[42] = sig_6332;
   Z[43] = A[11];
   Z[44] = sig_5374;
   Z[45] = sig_5182;
   Z[46] = A[8];
   Z[47] = sig_2740;
   Z[48] = sig_2740;
   Z[49] = A[3];
   Z[50] = sig_3760;
   Z[51] = sig_5458;
   Z[52] = sig_1058;
   Z[53] = B[23];
   Z[54] = sig_2740;
   Z[55] = sig_6338;
   Z[56] = B[19];
   Z[57] = sig_3476;
   Z[58] = A[27];
   Z[59] = sig_6336;
   Z[60] = sig_6333;
   Z[61] = sig_6335;
   Z[62] = sig_6338;
   Z[63] = sig_6340;

  return ((Z[0] & 0x01) << 0) | ((Z[1] & 0x01) << 1) | ((Z[2] & 0x01) << 2) | ((Z[3] & 0x01) << 3) | ((Z[4] & 0x01) << 4) | ((Z[5] & 0x01) << 5) | ((Z[6] & 0x01) << 6) | ((Z[7] & 0x01) << 7) | ((Z[8] & 0x01) << 8) | ((Z[9] & 0x01) << 9) | ((Z[10] & 0x01) << size_op1) | ((Z[11] & 0x01) << 11) | ((Z[12] & 0x01) << 12) | ((Z[13] & 0x01) << 13) | ((Z[14] & 0x01) << 14) | ((Z[15] & 0x01) << 15) | ((Z[16] & 0x01) << 16) | ((Z[17] & 0x01) << size_op2) | ((Z[18] & 0x01) << 18) | ((Z[19] & 0x01) << 19) | ((Z[20] & 0x01) << 20) | ((Z[21] & 0x01) << 21) | ((Z[22] & 0x01) << 22) | ((Z[23] & 0x01) << 23) | ((Z[24] & 0x01) << 24) | ((Z[25] & 0x01) << 25) | ((Z[26] & 0x01) << 26) | ((Z[27] & 0x01) << 27) | ((Z[28] & 0x01) << 28) | ((Z[29] & 0x01) << 29) | ((Z[30] & 0x01) << 30) | ((Z[31] & 0x01) << 31) | ((Z[32] & 0x01) << 32) | ((Z[33] & 0x01) << 33) | ((Z[34] & 0x01) << 34) | ((Z[35] & 0x01) << 35) | ((Z[36] & 0x01) << 36) | ((Z[37] & 0x01) << 37) | ((Z[38] & 0x01) << 38) | ((Z[39] & 0x01) << 39) | ((Z[40] & 0x01) << 40) | ((Z[41] & 0x01) << 41) | ((Z[42] & 0x01) << 42) | ((Z[43] & 0x01) << 43) | ((Z[44] & 0x01) << 44) | ((Z[45] & 0x01) << 45) | ((Z[46] & 0x01) << 46) | ((Z[47] & 0x01) << 47) | ((Z[48] & 0x01) << 48) | ((Z[49] & 0x01) << 49) | ((Z[50] & 0x01) << 50) | ((Z[51] & 0x01) << 51) | ((Z[52] & 0x01) << 52) | ((Z[53] & 0x01) << 53) | ((Z[54] & 0x01) << 54) | ((Z[55] & 0x01) << 55) | ((Z[56] & 0x01) << 56) | ((Z[57] & 0x01) << 57) | ((Z[58] & 0x01) << 58) | ((Z[59] & 0x01) << 59) | ((Z[60] & 0x01) << 60) | ((Z[61] & 0x01) << 61) | ((Z[62] & 0x01) << 62) | ((Z[63] & 0x01) << 63);

//   return Z = A + B + size_op1 + size_op2 ;

}
