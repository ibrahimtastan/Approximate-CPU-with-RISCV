// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module approx_add (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a,
        b,
        approx_add_size,
        add_sub,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] a;
input  [31:0] b;
input  [7:0] approx_add_size;
input  [0:0] add_sub;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] n132_fu_208_p2;
reg   [0:0] n132_reg_471;
wire   [0:0] n182_fu_220_p2;
reg   [0:0] n182_reg_478;
wire   [0:0] n232_fu_256_p2;
reg   [0:0] n232_reg_485;
wire   [0:0] n282_fu_292_p2;
reg   [0:0] n282_reg_492;
wire   [0:0] n332_fu_328_p2;
reg   [0:0] n332_reg_500;
wire   [0:0] n382_fu_364_p2;
reg   [0:0] n382_reg_507;
wire   [0:0] n383_fu_388_p2;
reg   [0:0] n383_reg_514;
reg   [0:0] tmp_99_reg_524;
wire    ap_CS_fsm_state2;
wire   [0:0] n30_fu_152_p3;
wire   [0:0] n14_fu_104_p3;
wire   [0:0] tmp_s_fu_160_p2;
wire   [0:0] n20_fu_112_p3;
wire   [0:0] tmp_fu_172_p1;
wire   [0:0] n4_fu_64_p3;
wire   [0:0] p_not_fu_166_p2;
wire   [0:0] tmp3_fu_182_p2;
wire   [0:0] tmp2_fu_176_p2;
wire   [1:0] tmp_98_fu_198_p1;
wire   [1:0] tmp_97_fu_194_p1;
wire   [0:0] n6_fu_72_p3;
wire   [0:0] n43_fu_188_p2;
wire   [0:0] tmp4_fu_214_p2;
wire   [0:0] n22_fu_120_p3;
wire   [0:0] tmp_74_fu_226_p2;
wire   [0:0] tmp_75_fu_232_p2;
wire   [0:0] tmp_76_fu_238_p2;
wire   [0:0] n8_fu_80_p3;
wire   [0:0] n183_fu_244_p2;
wire   [0:0] tmp5_fu_250_p2;
wire   [0:0] n24_fu_128_p3;
wire   [0:0] tmp_78_fu_268_p2;
wire   [0:0] tmp_79_fu_274_p2;
wire   [0:0] tmp_77_fu_262_p2;
wire   [0:0] n10_fu_88_p3;
wire   [0:0] n233_fu_280_p2;
wire   [0:0] tmp6_fu_286_p2;
wire   [0:0] n26_fu_136_p3;
wire   [0:0] tmp_80_fu_298_p2;
wire   [0:0] tmp_81_fu_304_p2;
wire   [0:0] tmp_82_fu_310_p2;
wire   [0:0] n12_fu_96_p3;
wire   [0:0] n283_fu_316_p2;
wire   [0:0] tmp7_fu_322_p2;
wire   [0:0] n28_fu_144_p3;
wire   [0:0] tmp_84_fu_340_p2;
wire   [0:0] tmp_85_fu_346_p2;
wire   [0:0] tmp_83_fu_334_p2;
wire   [0:0] n333_fu_352_p2;
wire   [0:0] tmp8_fu_358_p2;
wire   [0:0] tmp_86_fu_370_p2;
wire   [0:0] tmp_87_fu_376_p2;
wire   [0:0] tmp_88_fu_382_p2;
wire   [1:0] tmp_165_cast_fu_202_p2;
wire   [31:0] tmp23_fu_402_p33;
wire   [8:0] tmp_228_cast_fu_447_p1;
wire   [8:0] tmp_229_cast_fu_451_p1;
wire   [8:0] tmp_89_fu_455_p2;
wire   [31:0] c_fu_441_p2;
wire   [31:0] tmp_230_cast_fu_461_p1;
wire   [31:0] c_1_fu_465_p2;
reg   [31:0] ap_return_preg;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_return_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_preg <= c_1_fu_465_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        n132_reg_471 <= n132_fu_208_p2;
        n182_reg_478 <= n182_fu_220_p2;
        n232_reg_485 <= n232_fu_256_p2;
        n282_reg_492 <= n282_fu_292_p2;
        n332_reg_500 <= n332_fu_328_p2;
        n382_reg_507 <= n382_fu_364_p2;
        n383_reg_514 <= n383_fu_388_p2;
        tmp_99_reg_524 <= tmp_165_cast_fu_202_p2[32'd1];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return = c_1_fu_465_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign c_1_fu_465_p2 = c_fu_441_p2 << tmp_230_cast_fu_461_p1;

assign c_fu_441_p2 = (tmp23_fu_402_p33 | 32'd1049089);

assign n10_fu_88_p3 = a[32'd5];

assign n12_fu_96_p3 = a[32'd6];

assign n132_fu_208_p2 = (n4_fu_64_p3 | n20_fu_112_p3);

assign n14_fu_104_p3 = a[32'd7];

assign n182_fu_220_p2 = (tmp4_fu_214_p2 ^ n22_fu_120_p3);

assign n183_fu_244_p2 = (tmp_76_fu_238_p2 | tmp_75_fu_232_p2);

assign n20_fu_112_p3 = b[32'd2];

assign n22_fu_120_p3 = b[32'd3];

assign n232_fu_256_p2 = (tmp5_fu_250_p2 ^ n24_fu_128_p3);

assign n233_fu_280_p2 = (tmp_79_fu_274_p2 | tmp_77_fu_262_p2);

assign n24_fu_128_p3 = b[32'd4];

assign n26_fu_136_p3 = b[32'd5];

assign n282_fu_292_p2 = (tmp6_fu_286_p2 ^ n26_fu_136_p3);

assign n283_fu_316_p2 = (tmp_82_fu_310_p2 | tmp_81_fu_304_p2);

assign n28_fu_144_p3 = b[32'd6];

assign n30_fu_152_p3 = b[32'd7];

assign n332_fu_328_p2 = (tmp7_fu_322_p2 ^ n28_fu_144_p3);

assign n333_fu_352_p2 = (tmp_85_fu_346_p2 | tmp_83_fu_334_p2);

assign n382_fu_364_p2 = (tmp8_fu_358_p2 ^ n30_fu_152_p3);

assign n383_fu_388_p2 = (tmp_88_fu_382_p2 | tmp_87_fu_376_p2);

assign n43_fu_188_p2 = (tmp3_fu_182_p2 & tmp2_fu_176_p2);

assign n4_fu_64_p3 = a[32'd2];

assign n6_fu_72_p3 = a[32'd3];

assign n8_fu_80_p3 = a[32'd4];

assign p_not_fu_166_p2 = (tmp_s_fu_160_p2 ^ 1'd1);

assign tmp23_fu_402_p33 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{n383_reg_514}, {n282_reg_492}}, {n383_reg_514}}, {n383_reg_514}}, {n382_reg_507}}, {n332_reg_500}}, {n282_reg_492}}, {n232_reg_485}}, {n182_reg_478}}, {n132_reg_471}}, {tmp_99_reg_524}}, {1'd0}}, {n383_reg_514}}, {n383_reg_514}}, {n382_reg_507}}, {n332_reg_500}}, {n282_reg_492}}, {n232_reg_485}}, {n182_reg_478}}, {n132_reg_471}}, {tmp_99_reg_524}}, {tmp_99_reg_524}}, {1'd0}}, {n383_reg_514}}, {n382_reg_507}}, {n332_reg_500}}, {n282_reg_492}}, {n232_reg_485}}, {n182_reg_478}}, {n132_reg_471}}, {tmp_99_reg_524}}, {1'd0}};

assign tmp2_fu_176_p2 = (tmp_fu_172_p1 & n20_fu_112_p3);

assign tmp3_fu_182_p2 = (p_not_fu_166_p2 & n4_fu_64_p3);

assign tmp4_fu_214_p2 = (n6_fu_72_p3 ^ n43_fu_188_p2);

assign tmp5_fu_250_p2 = (n8_fu_80_p3 ^ n183_fu_244_p2);

assign tmp6_fu_286_p2 = (n233_fu_280_p2 ^ n10_fu_88_p3);

assign tmp7_fu_322_p2 = (n283_fu_316_p2 ^ n12_fu_96_p3);

assign tmp8_fu_358_p2 = (n333_fu_352_p2 ^ n14_fu_104_p3);

assign tmp_165_cast_fu_202_p2 = (tmp_98_fu_198_p1 | tmp_97_fu_194_p1);

assign tmp_228_cast_fu_447_p1 = approx_add_size;

assign tmp_229_cast_fu_451_p1 = add_sub;

assign tmp_230_cast_fu_461_p1 = tmp_89_fu_455_p2;

assign tmp_74_fu_226_p2 = (n6_fu_72_p3 | n43_fu_188_p2);

assign tmp_75_fu_232_p2 = (tmp_74_fu_226_p2 & n22_fu_120_p3);

assign tmp_76_fu_238_p2 = (n6_fu_72_p3 & n43_fu_188_p2);

assign tmp_77_fu_262_p2 = (n24_fu_128_p3 & n183_fu_244_p2);

assign tmp_78_fu_268_p2 = (n24_fu_128_p3 | n183_fu_244_p2);

assign tmp_79_fu_274_p2 = (tmp_78_fu_268_p2 & n8_fu_80_p3);

assign tmp_80_fu_298_p2 = (n233_fu_280_p2 | n10_fu_88_p3);

assign tmp_81_fu_304_p2 = (tmp_80_fu_298_p2 & n26_fu_136_p3);

assign tmp_82_fu_310_p2 = (n233_fu_280_p2 & n10_fu_88_p3);

assign tmp_83_fu_334_p2 = (n28_fu_144_p3 & n283_fu_316_p2);

assign tmp_84_fu_340_p2 = (n28_fu_144_p3 | n283_fu_316_p2);

assign tmp_85_fu_346_p2 = (tmp_84_fu_340_p2 & n12_fu_96_p3);

assign tmp_86_fu_370_p2 = (n333_fu_352_p2 | n14_fu_104_p3);

assign tmp_87_fu_376_p2 = (tmp_86_fu_370_p2 & n30_fu_152_p3);

assign tmp_88_fu_382_p2 = (n333_fu_352_p2 & n14_fu_104_p3);

assign tmp_89_fu_455_p2 = (tmp_228_cast_fu_447_p1 + tmp_229_cast_fu_451_p1);

assign tmp_97_fu_194_p1 = a[1:0];

assign tmp_98_fu_198_p1 = b[1:0];

assign tmp_fu_172_p1 = a[0:0];

assign tmp_s_fu_160_p2 = (n30_fu_152_p3 | n14_fu_104_p3);

endmodule //approx_add
