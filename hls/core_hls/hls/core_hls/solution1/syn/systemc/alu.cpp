// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "alu.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic alu::ap_const_logic_1 = sc_dt::Log_1;
const bool alu::ap_const_boolean_1 = true;
const sc_lv<3> alu::ap_const_lv3_1 = "1";
const sc_lv<3> alu::ap_const_lv3_3 = "11";
const sc_lv<3> alu::ap_const_lv3_2 = "10";
const sc_lv<3> alu::ap_const_lv3_7 = "111";
const sc_lv<3> alu::ap_const_lv3_6 = "110";
const sc_lv<3> alu::ap_const_lv3_4 = "100";
const sc_lv<32> alu::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<7> alu::ap_const_lv7_20 = "100000";
const sc_lv<7> alu::ap_const_lv7_0 = "0000000";
const sc_lv<3> alu::ap_const_lv3_0 = "000";
const sc_lv<3> alu::ap_const_lv3_5 = "101";
const sc_logic alu::ap_const_logic_0 = sc_dt::Log_0;

alu::alu(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_phi_mux_ret_4_phi_fu_63_p26);
    sensitive << ( ret_11_fu_108_p2 );
    sensitive << ( ftype_read_read_fu_42_p2 );
    sensitive << ( ret_2_fu_121_p1 );
    sensitive << ( ret_1_fu_132_p1 );
    sensitive << ( ret_10_fu_137_p2 );
    sensitive << ( ret_9_fu_144_p2 );
    sensitive << ( ret_fu_151_p2 );
    sensitive << ( func7_read_read_fu_36_p2 );
    sensitive << ( ret_13_fu_158_p2 );
    sensitive << ( ret_12_fu_165_p2 );
    sensitive << ( ret_15_fu_94_p2 );
    sensitive << ( ret_14_fu_101_p2 );

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_phi_mux_ret_4_phi_fu_63_p26 );

    SC_METHOD(thread_ftype_read_read_fu_42_p2);
    sensitive << ( ftype );

    SC_METHOD(thread_func7_read_read_fu_36_p2);
    sensitive << ( func7 );

    SC_METHOD(thread_ret_10_fu_137_p2);
    sensitive << ( op_1 );
    sensitive << ( op_2 );

    SC_METHOD(thread_ret_11_fu_108_p2);
    sensitive << ( op_1 );
    sensitive << ( op_2 );

    SC_METHOD(thread_ret_12_fu_165_p2);
    sensitive << ( op_1 );
    sensitive << ( op_2 );

    SC_METHOD(thread_ret_13_fu_158_p2);
    sensitive << ( op_1 );
    sensitive << ( op_2 );

    SC_METHOD(thread_ret_14_fu_101_p2);
    sensitive << ( op_1 );
    sensitive << ( op_2 );

    SC_METHOD(thread_ret_15_fu_94_p2);
    sensitive << ( op_1 );
    sensitive << ( op_2 );

    SC_METHOD(thread_ret_1_fu_132_p1);
    sensitive << ( tmp_s_fu_126_p2 );

    SC_METHOD(thread_ret_2_fu_121_p1);
    sensitive << ( tmp_90_fu_115_p2 );

    SC_METHOD(thread_ret_9_fu_144_p2);
    sensitive << ( op_1 );
    sensitive << ( op_2 );

    SC_METHOD(thread_ret_fu_151_p2);
    sensitive << ( op_1 );
    sensitive << ( op_2 );

    SC_METHOD(thread_tmp_90_fu_115_p2);
    sensitive << ( op_1 );
    sensitive << ( op_2 );
    sensitive << ( ftype_read_read_fu_42_p2 );

    SC_METHOD(thread_tmp_s_fu_126_p2);
    sensitive << ( op_1 );
    sensitive << ( op_2 );
    sensitive << ( ftype_read_read_fu_42_p2 );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "alu_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, op_1, "(port)op_1");
    sc_trace(mVcdFile, op_2, "(port)op_2");
    sc_trace(mVcdFile, ftype, "(port)ftype");
    sc_trace(mVcdFile, func7, "(port)func7");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ret_11_fu_108_p2, "ret_11_fu_108_p2");
    sc_trace(mVcdFile, ap_phi_mux_ret_4_phi_fu_63_p26, "ap_phi_mux_ret_4_phi_fu_63_p26");
    sc_trace(mVcdFile, ftype_read_read_fu_42_p2, "ftype_read_read_fu_42_p2");
    sc_trace(mVcdFile, ret_2_fu_121_p1, "ret_2_fu_121_p1");
    sc_trace(mVcdFile, ret_1_fu_132_p1, "ret_1_fu_132_p1");
    sc_trace(mVcdFile, ret_10_fu_137_p2, "ret_10_fu_137_p2");
    sc_trace(mVcdFile, ret_9_fu_144_p2, "ret_9_fu_144_p2");
    sc_trace(mVcdFile, ret_fu_151_p2, "ret_fu_151_p2");
    sc_trace(mVcdFile, func7_read_read_fu_36_p2, "func7_read_read_fu_36_p2");
    sc_trace(mVcdFile, ret_13_fu_158_p2, "ret_13_fu_158_p2");
    sc_trace(mVcdFile, ret_12_fu_165_p2, "ret_12_fu_165_p2");
    sc_trace(mVcdFile, ret_15_fu_94_p2, "ret_15_fu_94_p2");
    sc_trace(mVcdFile, ret_14_fu_101_p2, "ret_14_fu_101_p2");
    sc_trace(mVcdFile, tmp_90_fu_115_p2, "tmp_90_fu_115_p2");
    sc_trace(mVcdFile, tmp_s_fu_126_p2, "tmp_s_fu_126_p2");
#endif

    }
}

alu::~alu() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void alu::thread_ap_phi_mux_ret_4_phi_fu_63_p26() {
    if ((esl_seteq<1,7,7>(func7_read_read_fu_36_p2.read(), ap_const_lv7_0) && 
         esl_seteq<1,3,3>(ftype_read_read_fu_42_p2.read(), ap_const_lv3_5))) {
        ap_phi_mux_ret_4_phi_fu_63_p26 = ret_14_fu_101_p2.read();
    } else if ((esl_seteq<1,7,7>(func7_read_read_fu_36_p2.read(), ap_const_lv7_20) && 
                esl_seteq<1,3,3>(ftype_read_read_fu_42_p2.read(), ap_const_lv3_5))) {
        ap_phi_mux_ret_4_phi_fu_63_p26 = ret_15_fu_94_p2.read();
    } else if ((esl_seteq<1,7,7>(func7_read_read_fu_36_p2.read(), ap_const_lv7_0) && 
                esl_seteq<1,3,3>(ftype_read_read_fu_42_p2.read(), ap_const_lv3_0))) {
        ap_phi_mux_ret_4_phi_fu_63_p26 = ret_12_fu_165_p2.read();
    } else if ((esl_seteq<1,7,7>(func7_read_read_fu_36_p2.read(), ap_const_lv7_20) && 
                esl_seteq<1,3,3>(ftype_read_read_fu_42_p2.read(), ap_const_lv3_0))) {
        ap_phi_mux_ret_4_phi_fu_63_p26 = ret_13_fu_158_p2.read();
    } else if (((!esl_seteq<1,7,7>(func7_read_read_fu_36_p2.read(), ap_const_lv7_20) && 
                 !esl_seteq<1,7,7>(func7_read_read_fu_36_p2.read(), ap_const_lv7_0) && 
                 esl_seteq<1,3,3>(ftype_read_read_fu_42_p2.read(), ap_const_lv3_0)) || 
                (!esl_seteq<1,7,7>(func7_read_read_fu_36_p2.read(), ap_const_lv7_20) && 
                 !esl_seteq<1,7,7>(func7_read_read_fu_36_p2.read(), ap_const_lv7_0) && 
                 esl_seteq<1,3,3>(ftype_read_read_fu_42_p2.read(), ap_const_lv3_5)))) {
        ap_phi_mux_ret_4_phi_fu_63_p26 = ap_const_lv32_0;
    } else if (esl_seteq<1,3,3>(ftype_read_read_fu_42_p2.read(), ap_const_lv3_4)) {
        ap_phi_mux_ret_4_phi_fu_63_p26 = ret_fu_151_p2.read();
    } else if (esl_seteq<1,3,3>(ftype_read_read_fu_42_p2.read(), ap_const_lv3_6)) {
        ap_phi_mux_ret_4_phi_fu_63_p26 = ret_9_fu_144_p2.read();
    } else if (esl_seteq<1,3,3>(ftype_read_read_fu_42_p2.read(), ap_const_lv3_7)) {
        ap_phi_mux_ret_4_phi_fu_63_p26 = ret_10_fu_137_p2.read();
    } else if (esl_seteq<1,3,3>(ftype_read_read_fu_42_p2.read(), ap_const_lv3_2)) {
        ap_phi_mux_ret_4_phi_fu_63_p26 = ret_1_fu_132_p1.read();
    } else if (esl_seteq<1,3,3>(ftype_read_read_fu_42_p2.read(), ap_const_lv3_3)) {
        ap_phi_mux_ret_4_phi_fu_63_p26 = ret_2_fu_121_p1.read();
    } else if (esl_seteq<1,3,3>(ftype_read_read_fu_42_p2.read(), ap_const_lv3_1)) {
        ap_phi_mux_ret_4_phi_fu_63_p26 = ret_11_fu_108_p2.read();
    } else {
        ap_phi_mux_ret_4_phi_fu_63_p26 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void alu::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void alu::thread_ap_return() {
    ap_return = ap_phi_mux_ret_4_phi_fu_63_p26.read();
}

void alu::thread_ftype_read_read_fu_42_p2() {
    ftype_read_read_fu_42_p2 = ftype.read();
}

void alu::thread_func7_read_read_fu_36_p2() {
    func7_read_read_fu_36_p2 = func7.read();
}

void alu::thread_ret_10_fu_137_p2() {
    ret_10_fu_137_p2 = (op_2.read() & op_1.read());
}

void alu::thread_ret_11_fu_108_p2() {
    ret_11_fu_108_p2 = (!op_2.read().is_01())? sc_lv<32>(): op_1.read() << (unsigned short)op_2.read().to_uint();
}

void alu::thread_ret_12_fu_165_p2() {
    ret_12_fu_165_p2 = (!op_2.read().is_01() || !op_1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(op_2.read()) + sc_biguint<32>(op_1.read()));
}

void alu::thread_ret_13_fu_158_p2() {
    ret_13_fu_158_p2 = (!op_1.read().is_01() || !op_2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(op_1.read()) - sc_biguint<32>(op_2.read()));
}

void alu::thread_ret_14_fu_101_p2() {
    ret_14_fu_101_p2 = (!op_2.read().is_01())? sc_lv<32>(): op_1.read() >> (unsigned short)op_2.read().to_uint();
}

void alu::thread_ret_15_fu_94_p2() {
    ret_15_fu_94_p2 = (!op_1.read().is_01() || !op_2.read().is_01())? sc_lv<32>(): sc_bigint<32>(op_1.read()) >> (unsigned short)op_2.read().to_uint();
}

void alu::thread_ret_1_fu_132_p1() {
    ret_1_fu_132_p1 = esl_zext<32,1>(tmp_s_fu_126_p2.read());
}

void alu::thread_ret_2_fu_121_p1() {
    ret_2_fu_121_p1 = esl_zext<32,1>(tmp_90_fu_115_p2.read());
}

void alu::thread_ret_9_fu_144_p2() {
    ret_9_fu_144_p2 = (op_2.read() | op_1.read());
}

void alu::thread_ret_fu_151_p2() {
    ret_fu_151_p2 = (op_2.read() ^ op_1.read());
}

void alu::thread_tmp_90_fu_115_p2() {
    tmp_90_fu_115_p2 = (!op_1.read().is_01() || !op_2.read().is_01())? sc_lv<1>(): (sc_biguint<32>(op_1.read()) < sc_biguint<32>(op_2.read()));
}

void alu::thread_tmp_s_fu_126_p2() {
    tmp_s_fu_126_p2 = (!op_1.read().is_01() || !op_2.read().is_01())? sc_lv<1>(): (sc_bigint<32>(op_1.read()) < sc_bigint<32>(op_2.read()));
}

}

