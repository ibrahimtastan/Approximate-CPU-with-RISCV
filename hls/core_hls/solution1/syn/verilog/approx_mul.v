// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module approx_mul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        opA,
        opB,
        size_op1,
        size_op2,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] opA;
input  [31:0] opB;
input  [7:0] size_op1;
input  [7:0] size_op2;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_55_fu_162_p3;
reg   [0:0] tmp_55_reg_802;
wire   [0:0] tmp_60_fu_194_p3;
reg   [0:0] tmp_60_reg_807;
wire   [0:0] sig_158_fu_202_p2;
reg   [0:0] sig_158_reg_812;
wire   [0:0] sig_481_fu_214_p2;
reg   [0:0] sig_481_reg_817;
wire   [0:0] sig_504_fu_220_p2;
reg   [0:0] sig_504_reg_822;
wire   [0:0] sig_1058_fu_238_p2;
reg   [0:0] sig_1058_reg_827;
wire   [0:0] sig_1405_fu_250_p2;
reg   [0:0] sig_1405_reg_832;
wire   [0:0] sig_3452_fu_298_p2;
reg   [0:0] sig_3452_reg_837;
wire   [0:0] sig_3992_fu_316_p2;
reg   [0:0] sig_3992_reg_843;
wire   [0:0] sig_5314_fu_328_p2;
reg   [0:0] sig_5314_reg_849;
reg   [0:0] tmp_70_reg_854;
reg   [0:0] tmp_80_reg_860;
wire   [0:0] tmp_s_fu_380_p2;
reg   [0:0] tmp_s_reg_867;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_52_fu_138_p3;
wire   [0:0] tmp_58_fu_186_p3;
wire   [0:0] tmp_54_fu_154_p3;
wire   [0:0] tmp_53_fu_146_p3;
wire   [0:0] tmp_56_fu_170_p3;
wire   [0:0] tmp_57_fu_178_p3;
wire   [0:0] tmp3_fu_262_p2;
wire   [0:0] sig_2089_fu_256_p2;
wire   [0:0] sig_827_fu_226_p2;
wire   [0:0] sig_2740_fu_274_p2;
wire   [0:0] sig_280_fu_208_p2;
wire   [0:0] sig_3272_fu_280_p2;
wire   [0:0] sig_2643_fu_268_p2;
wire   [0:0] sig_3383_fu_286_p2;
wire   [0:0] sig_3760_fu_304_p2;
wire   [0:0] sig_3438_fu_292_p2;
wire   [0:0] sig_3974_fu_310_p2;
wire   [0:0] sig_1015_fu_232_p2;
wire   [0:0] sig_4402_fu_322_p2;
wire   [0:0] tmp6_fu_340_p2;
wire   [0:0] sig_1219_fu_244_p2;
wire   [0:0] tmp5_fu_346_p2;
wire   [0:0] tmp4_fu_334_p2;
wire   [0:0] tmp7_fu_374_p2;
wire   [0:0] sig_5458_fu_352_p2;
wire   [0:0] sig_810_fu_393_p2;
wire   [31:0] tmp_97_cast_fu_408_p1;
wire   [31:0] tmp_42_fu_411_p1;
wire   [31:0] sig_810_cast_fu_397_p1;
wire   [31:0] tmp_44_fu_449_p1;
wire   [0:0] tmp_89_fu_494_p3;
wire   [0:0] tmp_86_fu_473_p3;
wire   [0:0] tmp_85_fu_466_p3;
wire   [0:0] tmp_fu_386_p3;
wire   [0:0] tmp_84_fu_442_p3;
wire   [0:0] tmp_83_fu_435_p3;
wire   [0:0] tmp_82_fu_428_p3;
wire   [1:0] tmp_47_fu_501_p4;
wire   [0:0] tmp_79_fu_401_p3;
wire   [0:0] tmp_88_fu_487_p3;
wire   [0:0] tmp_87_fu_480_p3;
wire   [0:0] tmp_81_fu_421_p3;
wire   [26:0] tmp26_fu_555_p12;
wire   [31:0] tmp_45_fu_453_p2;
wire   [18:0] tmp_90_fu_583_p1;
wire   [18:0] tmp_46_fu_459_p3;
wire   [10:0] tmp_49_fu_593_p4;
wire   [18:0] tmp_48_fu_587_p2;
wire   [7:0] tmp_50_fu_613_p4;
wire   [29:0] tmp_51_fu_623_p3;
wire   [29:0] tmp32_fu_603_p5;
wire   [26:0] tmp_61_fu_640_p3;
wire   [26:0] tmp_59_fu_631_p4;
wire   [1:0] tmp_63_fu_654_p4;
wire   [29:0] tmp_62_fu_648_p2;
wire   [31:0] tmp_43_fu_415_p2;
wire   [14:0] tmp_91_fu_688_p1;
wire   [14:0] tmp34_fu_678_p5;
wire   [16:0] tmp_66_fu_698_p4;
wire   [14:0] tmp_65_fu_692_p2;
wire   [11:0] tmp_67_fu_708_p4;
wire   [31:0] tmp35_fu_718_p3;
wire   [31:0] tmp30_fu_670_p3;
wire   [26:0] tmp_68_fu_726_p3;
wire   [26:0] tmp_64_fu_664_p2;
wire   [26:0] tmp_69_fu_740_p2;
wire   [26:0] tmp23_fu_577_p2;
wire   [31:0] tmp33_fu_734_p2;
wire   [4:0] tmp_72_fu_752_p4;
wire   [26:0] tmp_71_fu_746_p2;
wire   [31:0] tmp29_fu_762_p3;
wire   [31:0] tmp8_fu_510_p24;
wire   [31:0] tmp22_fu_770_p2;
wire   [31:0] tmp_73_fu_776_p2;
reg   [31:0] ap_return_preg;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_return_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_preg <= tmp_73_fu_776_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sig_1058_reg_827 <= sig_1058_fu_238_p2;
        sig_1405_reg_832 <= sig_1405_fu_250_p2;
        sig_158_reg_812 <= sig_158_fu_202_p2;
        sig_3452_reg_837 <= sig_3452_fu_298_p2;
        sig_3992_reg_843 <= sig_3992_fu_316_p2;
        sig_481_reg_817 <= sig_481_fu_214_p2;
        sig_504_reg_822 <= sig_504_fu_220_p2;
        sig_5314_reg_849 <= sig_5314_fu_328_p2;
        tmp_55_reg_802 <= opA[32'd31];
        tmp_60_reg_807 <= opB[32'd31];
        tmp_70_reg_854 <= opA[32'd18];
        tmp_80_reg_860 <= opB[32'd16];
        tmp_s_reg_867 <= tmp_s_fu_380_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return = tmp_73_fu_776_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign sig_1015_fu_232_p2 = (tmp_58_fu_186_p3 & tmp_55_fu_162_p3);

assign sig_1058_fu_238_p2 = (tmp_57_fu_178_p3 & tmp_54_fu_154_p3);

assign sig_1219_fu_244_p2 = (tmp_60_fu_194_p3 & tmp_54_fu_154_p3);

assign sig_1405_fu_250_p2 = (sig_504_fu_220_p2 | sig_1058_fu_238_p2);

assign sig_158_fu_202_p2 = (tmp_60_fu_194_p3 & tmp_52_fu_138_p3);

assign sig_2089_fu_256_p2 = (sig_504_fu_220_p2 & sig_1058_fu_238_p2);

assign sig_2643_fu_268_p2 = (tmp_58_fu_186_p3 & tmp3_fu_262_p2);

assign sig_2740_fu_274_p2 = (sig_827_fu_226_p2 ^ sig_2089_fu_256_p2);

assign sig_280_fu_208_p2 = (tmp_58_fu_186_p3 & tmp_54_fu_154_p3);

assign sig_3272_fu_280_p2 = (sig_280_fu_208_p2 ^ sig_2740_fu_274_p2);

assign sig_3383_fu_286_p2 = (sig_280_fu_208_p2 & sig_2740_fu_274_p2);

assign sig_3438_fu_292_p2 = (sig_3272_fu_280_p2 & sig_2643_fu_268_p2);

assign sig_3452_fu_298_p2 = (sig_3383_fu_286_p2 | sig_2089_fu_256_p2);

assign sig_3760_fu_304_p2 = (sig_3272_fu_280_p2 ^ sig_2643_fu_268_p2);

assign sig_3974_fu_310_p2 = (sig_481_fu_214_p2 ^ sig_3760_fu_304_p2);

assign sig_3992_fu_316_p2 = (sig_481_fu_214_p2 & sig_3760_fu_304_p2);

assign sig_4402_fu_322_p2 = (sig_3992_fu_316_p2 | sig_3438_fu_292_p2);

assign sig_481_fu_214_p2 = (tmp_60_fu_194_p3 & tmp_53_fu_146_p3);

assign sig_504_fu_220_p2 = (tmp_56_fu_170_p3 & tmp_55_fu_162_p3);

assign sig_5314_fu_328_p2 = (sig_3974_fu_310_p2 & sig_158_fu_202_p2);

assign sig_5458_fu_352_p2 = (tmp5_fu_346_p2 ^ tmp4_fu_334_p2);

assign sig_810_cast_fu_397_p1 = sig_810_fu_393_p2;

assign sig_810_fu_393_p2 = (tmp_60_reg_807 & tmp_55_reg_802);

assign sig_827_fu_226_p2 = (tmp_57_fu_178_p3 & tmp_55_fu_162_p3);

assign tmp22_fu_770_p2 = (tmp8_fu_510_p24 | tmp29_fu_762_p3);

assign tmp23_fu_577_p2 = (tmp26_fu_555_p12 ^ 27'd16777216);

assign tmp26_fu_555_p12 = {{{{{{{{{{{tmp_88_fu_487_p3}, {tmp_80_reg_860}}, {sig_158_reg_812}}, {tmp_87_fu_480_p3}}, {7'd0}}, {sig_504_reg_822}}, {3'd0}}, {tmp_81_fu_421_p3}}, {3'd0}}, {sig_481_reg_817}}, {7'd0}};

assign tmp29_fu_762_p3 = {{tmp_72_fu_752_p4}, {tmp_71_fu_746_p2}};

assign tmp30_fu_670_p3 = {{tmp_63_fu_654_p4}, {tmp_62_fu_648_p2}};

assign tmp32_fu_603_p5 = {{{{sig_3992_reg_843}, {8'd0}}, {sig_3452_reg_837}}, {20'd0}};

assign tmp33_fu_734_p2 = (tmp35_fu_718_p3 | tmp30_fu_670_p3);

assign tmp34_fu_678_p5 = {{{{sig_3992_reg_843}, {11'd0}}, {sig_5314_reg_849}}, {2'd0}};

assign tmp35_fu_718_p3 = {{tmp_66_fu_698_p4}, {tmp_65_fu_692_p2}};

assign tmp3_fu_262_p2 = (tmp_53_fu_146_p3 & sig_1405_fu_250_p2);

assign tmp4_fu_334_p2 = (sig_3452_fu_298_p2 ^ sig_1015_fu_232_p2);

assign tmp5_fu_346_p2 = (tmp6_fu_340_p2 ^ sig_1219_fu_244_p2);

assign tmp6_fu_340_p2 = (sig_5314_fu_328_p2 ^ sig_4402_fu_322_p2);

assign tmp7_fu_374_p2 = (sig_3974_fu_310_p2 ^ sig_158_fu_202_p2);

assign tmp8_fu_510_p24 = {{{{{{{{{{{{{{{{{{{{{{{tmp_70_reg_854}, {sig_1058_reg_827}}, {1'd0}}, {tmp_89_fu_494_p3}}, {5'd0}}, {tmp_86_fu_473_p3}}, {tmp_85_fu_466_p3}}, {1'd0}}, {tmp_fu_386_p3}}, {2'd0}}, {tmp_84_fu_442_p3}}, {2'd0}}, {tmp_83_fu_435_p3}}, {tmp_82_fu_428_p3}}, {2'd0}}, {tmp_47_fu_501_p4}}, {2'd0}}, {tmp_80_reg_860}}, {tmp_80_reg_860}}, {tmp_79_fu_401_p3}}, {1'd0}}, {tmp_70_reg_854}}, {1'd0}};

assign tmp_42_fu_411_p1 = size_op1;

assign tmp_43_fu_415_p2 = tmp_97_cast_fu_408_p1 << tmp_42_fu_411_p1;

assign tmp_44_fu_449_p1 = size_op2;

assign tmp_45_fu_453_p2 = sig_810_cast_fu_397_p1 << tmp_44_fu_449_p1;

assign tmp_46_fu_459_p3 = {{sig_1405_reg_832}, {18'd0}};

assign tmp_47_fu_501_p4 = {{opA[8:7]}};

assign tmp_48_fu_587_p2 = (tmp_90_fu_583_p1 | tmp_46_fu_459_p3);

assign tmp_49_fu_593_p4 = {{tmp_45_fu_453_p2[29:19]}};

assign tmp_50_fu_613_p4 = {{tmp_45_fu_453_p2[26:19]}};

assign tmp_51_fu_623_p3 = {{tmp_49_fu_593_p4}, {tmp_48_fu_587_p2}};

assign tmp_52_fu_138_p3 = opA[32'd28];

assign tmp_53_fu_146_p3 = opA[32'd29];

assign tmp_54_fu_154_p3 = opA[32'd30];

assign tmp_55_fu_162_p3 = opA[32'd31];

assign tmp_56_fu_170_p3 = opB[32'd28];

assign tmp_57_fu_178_p3 = opB[32'd29];

assign tmp_58_fu_186_p3 = opB[32'd30];

assign tmp_59_fu_631_p4 = {{{{6'd0}, {sig_3452_reg_837}}}, {20'd0}};

assign tmp_60_fu_194_p3 = opB[32'd31];

assign tmp_61_fu_640_p3 = {{tmp_50_fu_613_p4}, {tmp_48_fu_587_p2}};

assign tmp_62_fu_648_p2 = (tmp_51_fu_623_p3 | tmp32_fu_603_p5);

assign tmp_63_fu_654_p4 = {{tmp_45_fu_453_p2[31:30]}};

assign tmp_64_fu_664_p2 = (tmp_61_fu_640_p3 | tmp_59_fu_631_p4);

assign tmp_65_fu_692_p2 = (tmp_91_fu_688_p1 | tmp34_fu_678_p5);

assign tmp_66_fu_698_p4 = {{tmp_43_fu_415_p2[31:15]}};

assign tmp_67_fu_708_p4 = {{tmp_43_fu_415_p2[26:15]}};

assign tmp_68_fu_726_p3 = {{tmp_67_fu_708_p4}, {tmp_65_fu_692_p2}};

assign tmp_69_fu_740_p2 = (tmp_68_fu_726_p3 | tmp_64_fu_664_p2);

assign tmp_71_fu_746_p2 = (tmp_69_fu_740_p2 | tmp23_fu_577_p2);

assign tmp_72_fu_752_p4 = {{tmp33_fu_734_p2[31:27]}};

assign tmp_73_fu_776_p2 = (tmp22_fu_770_p2 | 32'd64);

assign tmp_79_fu_401_p3 = opA[32'd6];

assign tmp_81_fu_421_p3 = opB[32'd3];

assign tmp_82_fu_428_p3 = opB[32'd20];

assign tmp_83_fu_435_p3 = opA[32'd16];

assign tmp_84_fu_442_p3 = opA[32'd25];

assign tmp_85_fu_466_p3 = opA[32'd2];

assign tmp_86_fu_473_p3 = opA[32'd11];

assign tmp_87_fu_480_p3 = opB[32'd9];

assign tmp_88_fu_487_p3 = opB[32'd22];

assign tmp_89_fu_494_p3 = opB[32'd7];

assign tmp_90_fu_583_p1 = tmp_45_fu_453_p2[18:0];

assign tmp_91_fu_688_p1 = tmp_43_fu_415_p2[14:0];

assign tmp_97_cast_fu_408_p1 = tmp_s_reg_867;

assign tmp_fu_386_p3 = opA[32'd19];

assign tmp_s_fu_380_p2 = (tmp7_fu_374_p2 & sig_5458_fu_352_p2);

endmodule //approx_mul
