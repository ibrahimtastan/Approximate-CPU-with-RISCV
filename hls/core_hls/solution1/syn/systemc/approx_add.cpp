// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "approx_add.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic approx_add::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic approx_add::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> approx_add::ap_ST_fsm_state1 = "1";
const sc_lv<2> approx_add::ap_ST_fsm_state2 = "10";
const sc_lv<32> approx_add::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> approx_add::ap_const_lv32_1 = "1";
const sc_lv<32> approx_add::ap_const_lv32_2 = "10";
const sc_lv<32> approx_add::ap_const_lv32_3 = "11";
const sc_lv<32> approx_add::ap_const_lv32_4 = "100";
const sc_lv<32> approx_add::ap_const_lv32_5 = "101";
const sc_lv<32> approx_add::ap_const_lv32_6 = "110";
const sc_lv<32> approx_add::ap_const_lv32_7 = "111";
const sc_lv<1> approx_add::ap_const_lv1_1 = "1";
const sc_lv<1> approx_add::ap_const_lv1_0 = "0";
const sc_lv<32> approx_add::ap_const_lv32_100201 = "100000000001000000001";
const bool approx_add::ap_const_boolean_1 = true;

approx_add::approx_add(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( c_1_fu_465_p2 );
    sensitive << ( ap_return_preg );

    SC_METHOD(thread_c_1_fu_465_p2);
    sensitive << ( c_fu_441_p2 );
    sensitive << ( tmp_230_cast_fu_461_p1 );

    SC_METHOD(thread_c_fu_441_p2);
    sensitive << ( tmp23_fu_402_p33 );

    SC_METHOD(thread_n10_fu_88_p3);
    sensitive << ( a );

    SC_METHOD(thread_n12_fu_96_p3);
    sensitive << ( a );

    SC_METHOD(thread_n132_fu_208_p2);
    sensitive << ( n20_fu_112_p3 );
    sensitive << ( n4_fu_64_p3 );

    SC_METHOD(thread_n14_fu_104_p3);
    sensitive << ( a );

    SC_METHOD(thread_n182_fu_220_p2);
    sensitive << ( tmp4_fu_214_p2 );
    sensitive << ( n22_fu_120_p3 );

    SC_METHOD(thread_n183_fu_244_p2);
    sensitive << ( tmp_75_fu_232_p2 );
    sensitive << ( tmp_76_fu_238_p2 );

    SC_METHOD(thread_n20_fu_112_p3);
    sensitive << ( b );

    SC_METHOD(thread_n22_fu_120_p3);
    sensitive << ( b );

    SC_METHOD(thread_n232_fu_256_p2);
    sensitive << ( tmp5_fu_250_p2 );
    sensitive << ( n24_fu_128_p3 );

    SC_METHOD(thread_n233_fu_280_p2);
    sensitive << ( tmp_79_fu_274_p2 );
    sensitive << ( tmp_77_fu_262_p2 );

    SC_METHOD(thread_n24_fu_128_p3);
    sensitive << ( b );

    SC_METHOD(thread_n26_fu_136_p3);
    sensitive << ( b );

    SC_METHOD(thread_n282_fu_292_p2);
    sensitive << ( tmp6_fu_286_p2 );
    sensitive << ( n26_fu_136_p3 );

    SC_METHOD(thread_n283_fu_316_p2);
    sensitive << ( tmp_81_fu_304_p2 );
    sensitive << ( tmp_82_fu_310_p2 );

    SC_METHOD(thread_n28_fu_144_p3);
    sensitive << ( b );

    SC_METHOD(thread_n30_fu_152_p3);
    sensitive << ( b );

    SC_METHOD(thread_n332_fu_328_p2);
    sensitive << ( tmp7_fu_322_p2 );
    sensitive << ( n28_fu_144_p3 );

    SC_METHOD(thread_n333_fu_352_p2);
    sensitive << ( tmp_85_fu_346_p2 );
    sensitive << ( tmp_83_fu_334_p2 );

    SC_METHOD(thread_n382_fu_364_p2);
    sensitive << ( n30_fu_152_p3 );
    sensitive << ( tmp8_fu_358_p2 );

    SC_METHOD(thread_n383_fu_388_p2);
    sensitive << ( tmp_87_fu_376_p2 );
    sensitive << ( tmp_88_fu_382_p2 );

    SC_METHOD(thread_n43_fu_188_p2);
    sensitive << ( tmp3_fu_182_p2 );
    sensitive << ( tmp2_fu_176_p2 );

    SC_METHOD(thread_n4_fu_64_p3);
    sensitive << ( a );

    SC_METHOD(thread_n6_fu_72_p3);
    sensitive << ( a );

    SC_METHOD(thread_n8_fu_80_p3);
    sensitive << ( a );

    SC_METHOD(thread_p_not_fu_166_p2);
    sensitive << ( tmp_s_fu_160_p2 );

    SC_METHOD(thread_tmp23_fu_402_p33);
    sensitive << ( n132_reg_471 );
    sensitive << ( n182_reg_478 );
    sensitive << ( n232_reg_485 );
    sensitive << ( n282_reg_492 );
    sensitive << ( n332_reg_500 );
    sensitive << ( n382_reg_507 );
    sensitive << ( n383_reg_514 );
    sensitive << ( tmp_99_reg_524 );

    SC_METHOD(thread_tmp2_fu_176_p2);
    sensitive << ( n20_fu_112_p3 );
    sensitive << ( tmp_fu_172_p1 );

    SC_METHOD(thread_tmp3_fu_182_p2);
    sensitive << ( n4_fu_64_p3 );
    sensitive << ( p_not_fu_166_p2 );

    SC_METHOD(thread_tmp4_fu_214_p2);
    sensitive << ( n6_fu_72_p3 );
    sensitive << ( n43_fu_188_p2 );

    SC_METHOD(thread_tmp5_fu_250_p2);
    sensitive << ( n8_fu_80_p3 );
    sensitive << ( n183_fu_244_p2 );

    SC_METHOD(thread_tmp6_fu_286_p2);
    sensitive << ( n10_fu_88_p3 );
    sensitive << ( n233_fu_280_p2 );

    SC_METHOD(thread_tmp7_fu_322_p2);
    sensitive << ( n12_fu_96_p3 );
    sensitive << ( n283_fu_316_p2 );

    SC_METHOD(thread_tmp8_fu_358_p2);
    sensitive << ( n14_fu_104_p3 );
    sensitive << ( n333_fu_352_p2 );

    SC_METHOD(thread_tmp_165_cast_fu_202_p2);
    sensitive << ( tmp_98_fu_198_p1 );
    sensitive << ( tmp_97_fu_194_p1 );

    SC_METHOD(thread_tmp_228_cast_fu_447_p1);
    sensitive << ( approx_add_size );

    SC_METHOD(thread_tmp_229_cast_fu_451_p1);
    sensitive << ( add_sub );

    SC_METHOD(thread_tmp_230_cast_fu_461_p1);
    sensitive << ( tmp_89_fu_455_p2 );

    SC_METHOD(thread_tmp_74_fu_226_p2);
    sensitive << ( n6_fu_72_p3 );
    sensitive << ( n43_fu_188_p2 );

    SC_METHOD(thread_tmp_75_fu_232_p2);
    sensitive << ( n22_fu_120_p3 );
    sensitive << ( tmp_74_fu_226_p2 );

    SC_METHOD(thread_tmp_76_fu_238_p2);
    sensitive << ( n6_fu_72_p3 );
    sensitive << ( n43_fu_188_p2 );

    SC_METHOD(thread_tmp_77_fu_262_p2);
    sensitive << ( n183_fu_244_p2 );
    sensitive << ( n24_fu_128_p3 );

    SC_METHOD(thread_tmp_78_fu_268_p2);
    sensitive << ( n183_fu_244_p2 );
    sensitive << ( n24_fu_128_p3 );

    SC_METHOD(thread_tmp_79_fu_274_p2);
    sensitive << ( n8_fu_80_p3 );
    sensitive << ( tmp_78_fu_268_p2 );

    SC_METHOD(thread_tmp_80_fu_298_p2);
    sensitive << ( n10_fu_88_p3 );
    sensitive << ( n233_fu_280_p2 );

    SC_METHOD(thread_tmp_81_fu_304_p2);
    sensitive << ( n26_fu_136_p3 );
    sensitive << ( tmp_80_fu_298_p2 );

    SC_METHOD(thread_tmp_82_fu_310_p2);
    sensitive << ( n10_fu_88_p3 );
    sensitive << ( n233_fu_280_p2 );

    SC_METHOD(thread_tmp_83_fu_334_p2);
    sensitive << ( n283_fu_316_p2 );
    sensitive << ( n28_fu_144_p3 );

    SC_METHOD(thread_tmp_84_fu_340_p2);
    sensitive << ( n283_fu_316_p2 );
    sensitive << ( n28_fu_144_p3 );

    SC_METHOD(thread_tmp_85_fu_346_p2);
    sensitive << ( n12_fu_96_p3 );
    sensitive << ( tmp_84_fu_340_p2 );

    SC_METHOD(thread_tmp_86_fu_370_p2);
    sensitive << ( n14_fu_104_p3 );
    sensitive << ( n333_fu_352_p2 );

    SC_METHOD(thread_tmp_87_fu_376_p2);
    sensitive << ( n30_fu_152_p3 );
    sensitive << ( tmp_86_fu_370_p2 );

    SC_METHOD(thread_tmp_88_fu_382_p2);
    sensitive << ( n14_fu_104_p3 );
    sensitive << ( n333_fu_352_p2 );

    SC_METHOD(thread_tmp_89_fu_455_p2);
    sensitive << ( tmp_228_cast_fu_447_p1 );
    sensitive << ( tmp_229_cast_fu_451_p1 );

    SC_METHOD(thread_tmp_97_fu_194_p1);
    sensitive << ( a );

    SC_METHOD(thread_tmp_98_fu_198_p1);
    sensitive << ( b );

    SC_METHOD(thread_tmp_fu_172_p1);
    sensitive << ( a );

    SC_METHOD(thread_tmp_s_fu_160_p2);
    sensitive << ( n30_fu_152_p3 );
    sensitive << ( n14_fu_104_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "01";
    ap_return_preg = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "approx_add_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a, "(port)a");
    sc_trace(mVcdFile, b, "(port)b");
    sc_trace(mVcdFile, approx_add_size, "(port)approx_add_size");
    sc_trace(mVcdFile, add_sub, "(port)add_sub");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, n132_fu_208_p2, "n132_fu_208_p2");
    sc_trace(mVcdFile, n132_reg_471, "n132_reg_471");
    sc_trace(mVcdFile, n182_fu_220_p2, "n182_fu_220_p2");
    sc_trace(mVcdFile, n182_reg_478, "n182_reg_478");
    sc_trace(mVcdFile, n232_fu_256_p2, "n232_fu_256_p2");
    sc_trace(mVcdFile, n232_reg_485, "n232_reg_485");
    sc_trace(mVcdFile, n282_fu_292_p2, "n282_fu_292_p2");
    sc_trace(mVcdFile, n282_reg_492, "n282_reg_492");
    sc_trace(mVcdFile, n332_fu_328_p2, "n332_fu_328_p2");
    sc_trace(mVcdFile, n332_reg_500, "n332_reg_500");
    sc_trace(mVcdFile, n382_fu_364_p2, "n382_fu_364_p2");
    sc_trace(mVcdFile, n382_reg_507, "n382_reg_507");
    sc_trace(mVcdFile, n383_fu_388_p2, "n383_fu_388_p2");
    sc_trace(mVcdFile, n383_reg_514, "n383_reg_514");
    sc_trace(mVcdFile, tmp_99_reg_524, "tmp_99_reg_524");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, n30_fu_152_p3, "n30_fu_152_p3");
    sc_trace(mVcdFile, n14_fu_104_p3, "n14_fu_104_p3");
    sc_trace(mVcdFile, tmp_s_fu_160_p2, "tmp_s_fu_160_p2");
    sc_trace(mVcdFile, n20_fu_112_p3, "n20_fu_112_p3");
    sc_trace(mVcdFile, tmp_fu_172_p1, "tmp_fu_172_p1");
    sc_trace(mVcdFile, n4_fu_64_p3, "n4_fu_64_p3");
    sc_trace(mVcdFile, p_not_fu_166_p2, "p_not_fu_166_p2");
    sc_trace(mVcdFile, tmp3_fu_182_p2, "tmp3_fu_182_p2");
    sc_trace(mVcdFile, tmp2_fu_176_p2, "tmp2_fu_176_p2");
    sc_trace(mVcdFile, tmp_98_fu_198_p1, "tmp_98_fu_198_p1");
    sc_trace(mVcdFile, tmp_97_fu_194_p1, "tmp_97_fu_194_p1");
    sc_trace(mVcdFile, n6_fu_72_p3, "n6_fu_72_p3");
    sc_trace(mVcdFile, n43_fu_188_p2, "n43_fu_188_p2");
    sc_trace(mVcdFile, tmp4_fu_214_p2, "tmp4_fu_214_p2");
    sc_trace(mVcdFile, n22_fu_120_p3, "n22_fu_120_p3");
    sc_trace(mVcdFile, tmp_74_fu_226_p2, "tmp_74_fu_226_p2");
    sc_trace(mVcdFile, tmp_75_fu_232_p2, "tmp_75_fu_232_p2");
    sc_trace(mVcdFile, tmp_76_fu_238_p2, "tmp_76_fu_238_p2");
    sc_trace(mVcdFile, n8_fu_80_p3, "n8_fu_80_p3");
    sc_trace(mVcdFile, n183_fu_244_p2, "n183_fu_244_p2");
    sc_trace(mVcdFile, tmp5_fu_250_p2, "tmp5_fu_250_p2");
    sc_trace(mVcdFile, n24_fu_128_p3, "n24_fu_128_p3");
    sc_trace(mVcdFile, tmp_78_fu_268_p2, "tmp_78_fu_268_p2");
    sc_trace(mVcdFile, tmp_79_fu_274_p2, "tmp_79_fu_274_p2");
    sc_trace(mVcdFile, tmp_77_fu_262_p2, "tmp_77_fu_262_p2");
    sc_trace(mVcdFile, n10_fu_88_p3, "n10_fu_88_p3");
    sc_trace(mVcdFile, n233_fu_280_p2, "n233_fu_280_p2");
    sc_trace(mVcdFile, tmp6_fu_286_p2, "tmp6_fu_286_p2");
    sc_trace(mVcdFile, n26_fu_136_p3, "n26_fu_136_p3");
    sc_trace(mVcdFile, tmp_80_fu_298_p2, "tmp_80_fu_298_p2");
    sc_trace(mVcdFile, tmp_81_fu_304_p2, "tmp_81_fu_304_p2");
    sc_trace(mVcdFile, tmp_82_fu_310_p2, "tmp_82_fu_310_p2");
    sc_trace(mVcdFile, n12_fu_96_p3, "n12_fu_96_p3");
    sc_trace(mVcdFile, n283_fu_316_p2, "n283_fu_316_p2");
    sc_trace(mVcdFile, tmp7_fu_322_p2, "tmp7_fu_322_p2");
    sc_trace(mVcdFile, n28_fu_144_p3, "n28_fu_144_p3");
    sc_trace(mVcdFile, tmp_84_fu_340_p2, "tmp_84_fu_340_p2");
    sc_trace(mVcdFile, tmp_85_fu_346_p2, "tmp_85_fu_346_p2");
    sc_trace(mVcdFile, tmp_83_fu_334_p2, "tmp_83_fu_334_p2");
    sc_trace(mVcdFile, n333_fu_352_p2, "n333_fu_352_p2");
    sc_trace(mVcdFile, tmp8_fu_358_p2, "tmp8_fu_358_p2");
    sc_trace(mVcdFile, tmp_86_fu_370_p2, "tmp_86_fu_370_p2");
    sc_trace(mVcdFile, tmp_87_fu_376_p2, "tmp_87_fu_376_p2");
    sc_trace(mVcdFile, tmp_88_fu_382_p2, "tmp_88_fu_382_p2");
    sc_trace(mVcdFile, tmp_165_cast_fu_202_p2, "tmp_165_cast_fu_202_p2");
    sc_trace(mVcdFile, tmp23_fu_402_p33, "tmp23_fu_402_p33");
    sc_trace(mVcdFile, tmp_228_cast_fu_447_p1, "tmp_228_cast_fu_447_p1");
    sc_trace(mVcdFile, tmp_229_cast_fu_451_p1, "tmp_229_cast_fu_451_p1");
    sc_trace(mVcdFile, tmp_89_fu_455_p2, "tmp_89_fu_455_p2");
    sc_trace(mVcdFile, c_fu_441_p2, "c_fu_441_p2");
    sc_trace(mVcdFile, tmp_230_cast_fu_461_p1, "tmp_230_cast_fu_461_p1");
    sc_trace(mVcdFile, c_1_fu_465_p2, "c_1_fu_465_p2");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

approx_add::~approx_add() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void approx_add::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_preg = c_1_fu_465_p2.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        n132_reg_471 = n132_fu_208_p2.read();
        n182_reg_478 = n182_fu_220_p2.read();
        n232_reg_485 = n232_fu_256_p2.read();
        n282_reg_492 = n282_fu_292_p2.read();
        n332_reg_500 = n332_fu_328_p2.read();
        n382_reg_507 = n382_fu_364_p2.read();
        n383_reg_514 = n383_fu_388_p2.read();
        tmp_99_reg_524 = tmp_165_cast_fu_202_p2.read().range(1, 1);
    }
}

void approx_add::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void approx_add::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void approx_add::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void approx_add::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void approx_add::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void approx_add::thread_ap_return() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return = c_1_fu_465_p2.read();
    } else {
        ap_return = ap_return_preg.read();
    }
}

void approx_add::thread_c_1_fu_465_p2() {
    c_1_fu_465_p2 = (!tmp_230_cast_fu_461_p1.read().is_01())? sc_lv<32>(): c_fu_441_p2.read() << (unsigned short)tmp_230_cast_fu_461_p1.read().to_uint();
}

void approx_add::thread_c_fu_441_p2() {
    c_fu_441_p2 = (tmp23_fu_402_p33.read() | ap_const_lv32_100201);
}

void approx_add::thread_n10_fu_88_p3() {
    n10_fu_88_p3 = a.read().range(5, 5);
}

void approx_add::thread_n12_fu_96_p3() {
    n12_fu_96_p3 = a.read().range(6, 6);
}

void approx_add::thread_n132_fu_208_p2() {
    n132_fu_208_p2 = (n20_fu_112_p3.read() | n4_fu_64_p3.read());
}

void approx_add::thread_n14_fu_104_p3() {
    n14_fu_104_p3 = a.read().range(7, 7);
}

void approx_add::thread_n182_fu_220_p2() {
    n182_fu_220_p2 = (tmp4_fu_214_p2.read() ^ n22_fu_120_p3.read());
}

void approx_add::thread_n183_fu_244_p2() {
    n183_fu_244_p2 = (tmp_75_fu_232_p2.read() | tmp_76_fu_238_p2.read());
}

void approx_add::thread_n20_fu_112_p3() {
    n20_fu_112_p3 = b.read().range(2, 2);
}

void approx_add::thread_n22_fu_120_p3() {
    n22_fu_120_p3 = b.read().range(3, 3);
}

void approx_add::thread_n232_fu_256_p2() {
    n232_fu_256_p2 = (tmp5_fu_250_p2.read() ^ n24_fu_128_p3.read());
}

void approx_add::thread_n233_fu_280_p2() {
    n233_fu_280_p2 = (tmp_79_fu_274_p2.read() | tmp_77_fu_262_p2.read());
}

void approx_add::thread_n24_fu_128_p3() {
    n24_fu_128_p3 = b.read().range(4, 4);
}

void approx_add::thread_n26_fu_136_p3() {
    n26_fu_136_p3 = b.read().range(5, 5);
}

void approx_add::thread_n282_fu_292_p2() {
    n282_fu_292_p2 = (tmp6_fu_286_p2.read() ^ n26_fu_136_p3.read());
}

void approx_add::thread_n283_fu_316_p2() {
    n283_fu_316_p2 = (tmp_81_fu_304_p2.read() | tmp_82_fu_310_p2.read());
}

void approx_add::thread_n28_fu_144_p3() {
    n28_fu_144_p3 = b.read().range(6, 6);
}

void approx_add::thread_n30_fu_152_p3() {
    n30_fu_152_p3 = b.read().range(7, 7);
}

void approx_add::thread_n332_fu_328_p2() {
    n332_fu_328_p2 = (tmp7_fu_322_p2.read() ^ n28_fu_144_p3.read());
}

void approx_add::thread_n333_fu_352_p2() {
    n333_fu_352_p2 = (tmp_85_fu_346_p2.read() | tmp_83_fu_334_p2.read());
}

void approx_add::thread_n382_fu_364_p2() {
    n382_fu_364_p2 = (tmp8_fu_358_p2.read() ^ n30_fu_152_p3.read());
}

void approx_add::thread_n383_fu_388_p2() {
    n383_fu_388_p2 = (tmp_87_fu_376_p2.read() | tmp_88_fu_382_p2.read());
}

void approx_add::thread_n43_fu_188_p2() {
    n43_fu_188_p2 = (tmp3_fu_182_p2.read() & tmp2_fu_176_p2.read());
}

void approx_add::thread_n4_fu_64_p3() {
    n4_fu_64_p3 = a.read().range(2, 2);
}

void approx_add::thread_n6_fu_72_p3() {
    n6_fu_72_p3 = a.read().range(3, 3);
}

void approx_add::thread_n8_fu_80_p3() {
    n8_fu_80_p3 = a.read().range(4, 4);
}

void approx_add::thread_p_not_fu_166_p2() {
    p_not_fu_166_p2 = (tmp_s_fu_160_p2.read() ^ ap_const_lv1_1);
}

void approx_add::thread_tmp23_fu_402_p33() {
    tmp23_fu_402_p33 = esl_concat<31,1>(esl_concat<30,1>(esl_concat<29,1>(esl_concat<28,1>(esl_concat<27,1>(esl_concat<26,1>(esl_concat<25,1>(esl_concat<24,1>(esl_concat<23,1>(esl_concat<22,1>(esl_concat<21,1>(esl_concat<20,1>(esl_concat<19,1>(esl_concat<18,1>(esl_concat<17,1>(esl_concat<16,1>(esl_concat<15,1>(esl_concat<14,1>(esl_concat<13,1>(esl_concat<12,1>(esl_concat<11,1>(esl_concat<10,1>(esl_concat<9,1>(esl_concat<8,1>(esl_concat<7,1>(esl_concat<6,1>(esl_concat<5,1>(esl_concat<4,1>(esl_concat<3,1>(esl_concat<2,1>(esl_concat<1,1>(n383_reg_514.read(), n282_reg_492.read()), n383_reg_514.read()), n383_reg_514.read()), n382_reg_507.read()), n332_reg_500.read()), n282_reg_492.read()), n232_reg_485.read()), n182_reg_478.read()), n132_reg_471.read()), tmp_99_reg_524.read()), ap_const_lv1_0), n383_reg_514.read()), n383_reg_514.read()), n382_reg_507.read()), n332_reg_500.read()), n282_reg_492.read()), n232_reg_485.read()), n182_reg_478.read()), n132_reg_471.read()), tmp_99_reg_524.read()), tmp_99_reg_524.read()), ap_const_lv1_0), n383_reg_514.read()), n382_reg_507.read()), n332_reg_500.read()), n282_reg_492.read()), n232_reg_485.read()), n182_reg_478.read()), n132_reg_471.read()), tmp_99_reg_524.read()), ap_const_lv1_0);
}

void approx_add::thread_tmp2_fu_176_p2() {
    tmp2_fu_176_p2 = (n20_fu_112_p3.read() & tmp_fu_172_p1.read());
}

void approx_add::thread_tmp3_fu_182_p2() {
    tmp3_fu_182_p2 = (n4_fu_64_p3.read() & p_not_fu_166_p2.read());
}

void approx_add::thread_tmp4_fu_214_p2() {
    tmp4_fu_214_p2 = (n6_fu_72_p3.read() ^ n43_fu_188_p2.read());
}

void approx_add::thread_tmp5_fu_250_p2() {
    tmp5_fu_250_p2 = (n8_fu_80_p3.read() ^ n183_fu_244_p2.read());
}

void approx_add::thread_tmp6_fu_286_p2() {
    tmp6_fu_286_p2 = (n10_fu_88_p3.read() ^ n233_fu_280_p2.read());
}

void approx_add::thread_tmp7_fu_322_p2() {
    tmp7_fu_322_p2 = (n12_fu_96_p3.read() ^ n283_fu_316_p2.read());
}

void approx_add::thread_tmp8_fu_358_p2() {
    tmp8_fu_358_p2 = (n14_fu_104_p3.read() ^ n333_fu_352_p2.read());
}

void approx_add::thread_tmp_165_cast_fu_202_p2() {
    tmp_165_cast_fu_202_p2 = (tmp_98_fu_198_p1.read() | tmp_97_fu_194_p1.read());
}

void approx_add::thread_tmp_228_cast_fu_447_p1() {
    tmp_228_cast_fu_447_p1 = esl_zext<9,8>(approx_add_size.read());
}

void approx_add::thread_tmp_229_cast_fu_451_p1() {
    tmp_229_cast_fu_451_p1 = esl_zext<9,1>(add_sub.read());
}

void approx_add::thread_tmp_230_cast_fu_461_p1() {
    tmp_230_cast_fu_461_p1 = esl_zext<32,9>(tmp_89_fu_455_p2.read());
}

void approx_add::thread_tmp_74_fu_226_p2() {
    tmp_74_fu_226_p2 = (n43_fu_188_p2.read() | n6_fu_72_p3.read());
}

void approx_add::thread_tmp_75_fu_232_p2() {
    tmp_75_fu_232_p2 = (tmp_74_fu_226_p2.read() & n22_fu_120_p3.read());
}

void approx_add::thread_tmp_76_fu_238_p2() {
    tmp_76_fu_238_p2 = (n6_fu_72_p3.read() & n43_fu_188_p2.read());
}

void approx_add::thread_tmp_77_fu_262_p2() {
    tmp_77_fu_262_p2 = (n183_fu_244_p2.read() & n24_fu_128_p3.read());
}

void approx_add::thread_tmp_78_fu_268_p2() {
    tmp_78_fu_268_p2 = (n183_fu_244_p2.read() | n24_fu_128_p3.read());
}

void approx_add::thread_tmp_79_fu_274_p2() {
    tmp_79_fu_274_p2 = (tmp_78_fu_268_p2.read() & n8_fu_80_p3.read());
}

void approx_add::thread_tmp_80_fu_298_p2() {
    tmp_80_fu_298_p2 = (n233_fu_280_p2.read() | n10_fu_88_p3.read());
}

void approx_add::thread_tmp_81_fu_304_p2() {
    tmp_81_fu_304_p2 = (tmp_80_fu_298_p2.read() & n26_fu_136_p3.read());
}

void approx_add::thread_tmp_82_fu_310_p2() {
    tmp_82_fu_310_p2 = (n233_fu_280_p2.read() & n10_fu_88_p3.read());
}

void approx_add::thread_tmp_83_fu_334_p2() {
    tmp_83_fu_334_p2 = (n283_fu_316_p2.read() & n28_fu_144_p3.read());
}

void approx_add::thread_tmp_84_fu_340_p2() {
    tmp_84_fu_340_p2 = (n283_fu_316_p2.read() | n28_fu_144_p3.read());
}

void approx_add::thread_tmp_85_fu_346_p2() {
    tmp_85_fu_346_p2 = (tmp_84_fu_340_p2.read() & n12_fu_96_p3.read());
}

void approx_add::thread_tmp_86_fu_370_p2() {
    tmp_86_fu_370_p2 = (n333_fu_352_p2.read() | n14_fu_104_p3.read());
}

void approx_add::thread_tmp_87_fu_376_p2() {
    tmp_87_fu_376_p2 = (tmp_86_fu_370_p2.read() & n30_fu_152_p3.read());
}

void approx_add::thread_tmp_88_fu_382_p2() {
    tmp_88_fu_382_p2 = (n333_fu_352_p2.read() & n14_fu_104_p3.read());
}

void approx_add::thread_tmp_89_fu_455_p2() {
    tmp_89_fu_455_p2 = (!tmp_228_cast_fu_447_p1.read().is_01() || !tmp_229_cast_fu_451_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(tmp_228_cast_fu_447_p1.read()) + sc_biguint<9>(tmp_229_cast_fu_451_p1.read()));
}

void approx_add::thread_tmp_97_fu_194_p1() {
    tmp_97_fu_194_p1 = a.read().range(2-1, 0);
}

void approx_add::thread_tmp_98_fu_198_p1() {
    tmp_98_fu_198_p1 = b.read().range(2-1, 0);
}

void approx_add::thread_tmp_fu_172_p1() {
    tmp_fu_172_p1 = a.read().range(1-1, 0);
}

void approx_add::thread_tmp_s_fu_160_p2() {
    tmp_s_fu_160_p2 = (n30_fu_152_p3.read() | n14_fu_104_p3.read());
}

void approx_add::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

