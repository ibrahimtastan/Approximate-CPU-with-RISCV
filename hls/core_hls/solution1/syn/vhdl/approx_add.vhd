-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity approx_add is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a : IN STD_LOGIC_VECTOR (31 downto 0);
    b : IN STD_LOGIC_VECTOR (31 downto 0);
    approx_add_size : IN STD_LOGIC_VECTOR (7 downto 0);
    add_sub : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of approx_add is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_100201 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000001000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal n132_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n132_reg_471 : STD_LOGIC_VECTOR (0 downto 0);
    signal n182_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n182_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal n232_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n232_reg_485 : STD_LOGIC_VECTOR (0 downto 0);
    signal n282_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n282_reg_492 : STD_LOGIC_VECTOR (0 downto 0);
    signal n332_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n332_reg_500 : STD_LOGIC_VECTOR (0 downto 0);
    signal n382_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n382_reg_507 : STD_LOGIC_VECTOR (0 downto 0);
    signal n383_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n383_reg_514 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_99_reg_524 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal n30_fu_152_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal n14_fu_104_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n20_fu_112_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_172_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal n4_fu_64_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_98_fu_198_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_97_fu_194_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal n6_fu_72_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal n43_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n22_fu_120_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_75_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n8_fu_80_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal n183_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n24_fu_128_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_79_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n10_fu_88_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal n233_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n26_fu_136_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_80_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n12_fu_96_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal n283_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp7_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n28_fu_144_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_84_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_85_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_83_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n333_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_87_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_165_cast_fu_202_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp23_fu_402_p33 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_228_cast_fu_447_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_229_cast_fu_451_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_89_fu_455_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_fu_441_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_230_cast_fu_461_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_1_fu_465_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_preg <= c_1_fu_465_p2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                n132_reg_471 <= n132_fu_208_p2;
                n182_reg_478 <= n182_fu_220_p2;
                n232_reg_485 <= n232_fu_256_p2;
                n282_reg_492 <= n282_fu_292_p2;
                n332_reg_500 <= n332_fu_328_p2;
                n382_reg_507 <= n382_fu_364_p2;
                n383_reg_514 <= n383_fu_388_p2;
                tmp_99_reg_524 <= tmp_165_cast_fu_202_p2(1 downto 1);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state2, c_1_fu_465_p2, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return <= c_1_fu_465_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    c_1_fu_465_p2 <= std_logic_vector(shift_left(unsigned(c_fu_441_p2),to_integer(unsigned('0' & tmp_230_cast_fu_461_p1(31-1 downto 0)))));
    c_fu_441_p2 <= (tmp23_fu_402_p33 or ap_const_lv32_100201);
    n10_fu_88_p3 <= a(5 downto 5);
    n12_fu_96_p3 <= a(6 downto 6);
    n132_fu_208_p2 <= (n4_fu_64_p3 or n20_fu_112_p3);
    n14_fu_104_p3 <= a(7 downto 7);
    n182_fu_220_p2 <= (tmp4_fu_214_p2 xor n22_fu_120_p3);
    n183_fu_244_p2 <= (tmp_76_fu_238_p2 or tmp_75_fu_232_p2);
    n20_fu_112_p3 <= b(2 downto 2);
    n22_fu_120_p3 <= b(3 downto 3);
    n232_fu_256_p2 <= (tmp5_fu_250_p2 xor n24_fu_128_p3);
    n233_fu_280_p2 <= (tmp_79_fu_274_p2 or tmp_77_fu_262_p2);
    n24_fu_128_p3 <= b(4 downto 4);
    n26_fu_136_p3 <= b(5 downto 5);
    n282_fu_292_p2 <= (tmp6_fu_286_p2 xor n26_fu_136_p3);
    n283_fu_316_p2 <= (tmp_82_fu_310_p2 or tmp_81_fu_304_p2);
    n28_fu_144_p3 <= b(6 downto 6);
    n30_fu_152_p3 <= b(7 downto 7);
    n332_fu_328_p2 <= (tmp7_fu_322_p2 xor n28_fu_144_p3);
    n333_fu_352_p2 <= (tmp_85_fu_346_p2 or tmp_83_fu_334_p2);
    n382_fu_364_p2 <= (tmp8_fu_358_p2 xor n30_fu_152_p3);
    n383_fu_388_p2 <= (tmp_88_fu_382_p2 or tmp_87_fu_376_p2);
    n43_fu_188_p2 <= (tmp3_fu_182_p2 and tmp2_fu_176_p2);
    n4_fu_64_p3 <= a(2 downto 2);
    n6_fu_72_p3 <= a(3 downto 3);
    n8_fu_80_p3 <= a(4 downto 4);
    p_not_fu_166_p2 <= (tmp_s_fu_160_p2 xor ap_const_lv1_1);
    tmp23_fu_402_p33 <= (((((((((((((((((((((((((((((((n383_reg_514 & n282_reg_492) & n383_reg_514) & n383_reg_514) & n382_reg_507) & n332_reg_500) & n282_reg_492) & n232_reg_485) & n182_reg_478) & n132_reg_471) & tmp_99_reg_524) & ap_const_lv1_0) & n383_reg_514) & n383_reg_514) & n382_reg_507) & n332_reg_500) & n282_reg_492) & n232_reg_485) & n182_reg_478) & n132_reg_471) & tmp_99_reg_524) & tmp_99_reg_524) & ap_const_lv1_0) & n383_reg_514) & n382_reg_507) & n332_reg_500) & n282_reg_492) & n232_reg_485) & n182_reg_478) & n132_reg_471) & tmp_99_reg_524) & ap_const_lv1_0);
    tmp2_fu_176_p2 <= (tmp_fu_172_p1 and n20_fu_112_p3);
    tmp3_fu_182_p2 <= (p_not_fu_166_p2 and n4_fu_64_p3);
    tmp4_fu_214_p2 <= (n6_fu_72_p3 xor n43_fu_188_p2);
    tmp5_fu_250_p2 <= (n8_fu_80_p3 xor n183_fu_244_p2);
    tmp6_fu_286_p2 <= (n233_fu_280_p2 xor n10_fu_88_p3);
    tmp7_fu_322_p2 <= (n283_fu_316_p2 xor n12_fu_96_p3);
    tmp8_fu_358_p2 <= (n333_fu_352_p2 xor n14_fu_104_p3);
    tmp_165_cast_fu_202_p2 <= (tmp_98_fu_198_p1 or tmp_97_fu_194_p1);
    tmp_228_cast_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(approx_add_size),9));
    tmp_229_cast_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_sub),9));
    tmp_230_cast_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_89_fu_455_p2),32));
    tmp_74_fu_226_p2 <= (n6_fu_72_p3 or n43_fu_188_p2);
    tmp_75_fu_232_p2 <= (tmp_74_fu_226_p2 and n22_fu_120_p3);
    tmp_76_fu_238_p2 <= (n6_fu_72_p3 and n43_fu_188_p2);
    tmp_77_fu_262_p2 <= (n24_fu_128_p3 and n183_fu_244_p2);
    tmp_78_fu_268_p2 <= (n24_fu_128_p3 or n183_fu_244_p2);
    tmp_79_fu_274_p2 <= (tmp_78_fu_268_p2 and n8_fu_80_p3);
    tmp_80_fu_298_p2 <= (n233_fu_280_p2 or n10_fu_88_p3);
    tmp_81_fu_304_p2 <= (tmp_80_fu_298_p2 and n26_fu_136_p3);
    tmp_82_fu_310_p2 <= (n233_fu_280_p2 and n10_fu_88_p3);
    tmp_83_fu_334_p2 <= (n28_fu_144_p3 and n283_fu_316_p2);
    tmp_84_fu_340_p2 <= (n28_fu_144_p3 or n283_fu_316_p2);
    tmp_85_fu_346_p2 <= (tmp_84_fu_340_p2 and n12_fu_96_p3);
    tmp_86_fu_370_p2 <= (n333_fu_352_p2 or n14_fu_104_p3);
    tmp_87_fu_376_p2 <= (tmp_86_fu_370_p2 and n30_fu_152_p3);
    tmp_88_fu_382_p2 <= (n333_fu_352_p2 and n14_fu_104_p3);
    tmp_89_fu_455_p2 <= std_logic_vector(unsigned(tmp_228_cast_fu_447_p1) + unsigned(tmp_229_cast_fu_451_p1));
    tmp_97_fu_194_p1 <= a(2 - 1 downto 0);
    tmp_98_fu_198_p1 <= b(2 - 1 downto 0);
    tmp_fu_172_p1 <= a(1 - 1 downto 0);
    tmp_s_fu_160_p2 <= (n30_fu_152_p3 or n14_fu_104_p3);
end behav;
