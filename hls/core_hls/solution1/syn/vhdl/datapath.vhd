-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity datapath is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    PC : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of datapath is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (98 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (98 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (98 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (98 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (98 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (98 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (98 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (98 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (98 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (98 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (98 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (98 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_33 : STD_LOGIC_VECTOR (6 downto 0) := "0110011";
    constant ap_const_lv7_41 : STD_LOGIC_VECTOR (6 downto 0) := "1000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv7_6F : STD_LOGIC_VECTOR (6 downto 0) := "1101111";
    constant ap_const_lv7_63 : STD_LOGIC_VECTOR (6 downto 0) := "1100011";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_23 : STD_LOGIC_VECTOR (6 downto 0) := "0100011";
    constant ap_const_lv7_13 : STD_LOGIC_VECTOR (6 downto 0) := "0010011";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv7_37 : STD_LOGIC_VECTOR (6 downto 0) := "0110111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv7_17 : STD_LOGIC_VECTOR (6 downto 0) := "0010111";
    constant ap_const_lv7_67 : STD_LOGIC_VECTOR (6 downto 0) := "1100111";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv8_20 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFF6001 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111110110000000000001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv32_FFFF6000 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111110110000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_FFFF6002 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111110110000000000010";
    constant ap_const_lv32_FFFF6003 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111110110000000000011";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal inst_mem_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inst_mem_ce0 : STD_LOGIC;
    signal inst_mem_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rf_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rf_ce0 : STD_LOGIC;
    signal rf_we0 : STD_LOGIC;
    signal rf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rf_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal rf_ce1 : STD_LOGIC;
    signal rf_we1 : STD_LOGIC;
    signal rf_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rf_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mem_ce0 : STD_LOGIC;
    signal mem_we0 : STD_LOGIC;
    signal mem_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mem_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mem_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mem_ce1 : STD_LOGIC;
    signal mem_we1 : STD_LOGIC;
    signal mem_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mem_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_556_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_583 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal Opcode_reg_1533 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_reg_1567 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_528_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_alu_fu_501_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_588 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal instruction_reg_1520 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal Opcode_fu_609_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal Rd_reg_1537 : STD_LOGIC_VECTOR (4 downto 0);
    signal imm3_reg_1552 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_36_cast_reg_1562 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_imm_fu_683_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_imm_reg_1584 : STD_LOGIC_VECTOR (31 downto 0);
    signal op_1_reg_1591 : STD_LOGIC_VECTOR (31 downto 0);
    signal op_2_reg_1610 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1633 : STD_LOGIC_VECTOR (0 downto 0);
    signal jal_imm_3_fu_750_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rev3_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev2_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_2_i_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i5_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_assign_fu_802_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal addr_assign_reg_1674 : STD_LOGIC_VECTOR (31 downto 0);
    signal addr_s_fu_808_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal addr_s_reg_1681 : STD_LOGIC_VECTOR (31 downto 0);
    signal imm7_fu_827_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal imm7_reg_1688 : STD_LOGIC_VECTOR (6 downto 0);
    signal res_fu_834_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_reg_1693 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_1704 : STD_LOGIC_VECTOR (0 downto 0);
    signal pc_amount_2_fu_874_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal pc_amount_3_fu_967_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_phi_mux_ret_6_i_phi_fu_393_p12 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_assign_1_fu_1045_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal addr_assign_1_reg_1718 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal mem_load_reg_1734 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal mem_load_1_reg_1740 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp4_i_fu_1127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_i_reg_1755 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_i_fu_1132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_i_reg_1760 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_1157_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel_reg_1766 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel4_fu_1179_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal newSel4_reg_1771 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_7_fu_1249_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_7_reg_1776 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal res_8_fu_1262_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_8_reg_1781 : STD_LOGIC_VECTOR (31 downto 0);
    signal approx_mul_size_op1_fu_1293_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal approx_mul_size_op1_reg_1786 : STD_LOGIC_VECTOR (7 downto 0);
    signal approx_mul_size_op2_fu_1325_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal approx_mul_size_op2_reg_1791 : STD_LOGIC_VECTOR (7 downto 0);
    signal res_9_fu_1375_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_9_reg_1796 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_approx_mul_fu_509_ap_idle : STD_LOGIC;
    signal grp_approx_mul_fu_509_ap_ready : STD_LOGIC;
    signal grp_approx_mul_fu_509_ap_done : STD_LOGIC;
    signal grp_fu_840_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal grp_fu_846_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal tmp_36_reg_1811 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ret_fu_1399_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_reg_1816 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_6_fu_1403_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal grp_approx_add_fu_517_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal grp_approx_add_fu_517_ap_idle : STD_LOGIC;
    signal grp_approx_add_fu_517_ap_ready : STD_LOGIC;
    signal grp_approx_add_fu_517_ap_done : STD_LOGIC;
    signal approx_add_size_fu_1495_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal approx_add_size_reg_1831 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal grp_alu_fu_501_ap_ready : STD_LOGIC;
    signal grp_alu_fu_501_op_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_alu_fu_501_func7 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_approx_mul_fu_509_ap_start : STD_LOGIC;
    signal grp_approx_mul_fu_509_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_approx_add_fu_517_ap_start : STD_LOGIC;
    signal grp_approx_add_fu_517_b : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_approx_add_fu_517_approx_add_size : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_approx_add_fu_517_add_sub : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_6_i_reg_390 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret1_i_reg_407 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ret4_i_reg_419 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_pc_amount_1_phi_fu_449_p24 : STD_LOGIC_VECTOR (31 downto 0);
    signal pc_amount_1_reg_445 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ret_1_i_reg_484 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_approx_mul_fu_509_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_approx_add_fu_517_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal tmp_s_fu_604_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_678_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_764_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_866_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_885_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_i_fu_975_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_13_i_fu_979_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_i_fu_999_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_i_fu_1019_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_i_fu_1028_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_6_i_fu_1032_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_i_fu_1041_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i6_fu_1055_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_i9_fu_1066_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_i1_fu_1092_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_i2_fu_1102_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_1234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_1238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_fu_1383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_40_fu_1410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_1414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal tmp_41_fu_1503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal tmp_18_fu_758_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_814_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_860_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_879_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_5_fu_1225_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_971_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_1024_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_1037_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_535_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_535_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_541_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_541_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_556_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_562_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_594_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal Rs1_fu_633_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal Rs2_fu_653_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_fu_700_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_709_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_cast_fu_691_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal jal_imm_fu_716_p6 : STD_LOGIC_VECTOR (20 downto 0);
    signal jal_imm_1_fu_734_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal jal_imm_cast_fu_730_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal not_2_i_fu_780_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal not_2_i_fu_780_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i5_fu_786_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i5_fu_786_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_792_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal addr_assign_fu_802_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_imm_fu_798_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_547_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal res_fu_834_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_852_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_870_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_fu_907_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_898_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_i1_cast_fu_889_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal imm16_fu_914_p5 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_48_fu_926_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_937_p6 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_33_fu_933_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_35_fu_951_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal imm16_1_fu_959_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_578_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_i_fu_994_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_i_fu_1014_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal addr_s_1_fu_1049_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i8_fu_1060_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i1_fu_1075_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_i1_fu_1087_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_i2_fu_1097_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_1137_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_fu_1145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp13_i_fu_1151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_2_fu_1083_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_4_fu_1107_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp2_i_fu_1122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_i7_cast_fu_1071_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp_i1_fu_1117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_fu_1173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel2_fu_1165_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_1_fu_1187_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_3_fu_1190_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel1_fu_1200_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond_fu_1207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_1217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel3_fu_1211_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel45_cast_fu_1222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_fu_1242_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_1255_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_fu_1275_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_fu_1283_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i4_i_i_fu_1269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_op_fu_1287_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i6_i_i_fu_1307_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_1315_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i5_i_i_fu_1301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp1_op_fu_1319_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_i_i_fu_1333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i_i_fu_1345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_1349_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_1337_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_1357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_i_fu_1363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_5_fu_1369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_1387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_i_fu_1437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i3_fu_1423_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i2_i_fu_1430_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp1_i_fu_1443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_1449_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_50_fu_1453_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i1_i_fu_1418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_i_fu_1471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_1457_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp6_i_fu_1477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_i_fu_1465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_1489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_op8_i_fu_1483_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_840_ap_start : STD_LOGIC;
    signal grp_fu_840_ap_done : STD_LOGIC;
    signal grp_fu_846_ap_start : STD_LOGIC;
    signal grp_fu_846_ap_done : STD_LOGIC;
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (98 downto 0);

    component alu IS
    port (
        ap_ready : OUT STD_LOGIC;
        op_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        op_2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ftype : IN STD_LOGIC_VECTOR (2 downto 0);
        func7 : IN STD_LOGIC_VECTOR (6 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component approx_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        opA : IN STD_LOGIC_VECTOR (31 downto 0);
        opB : IN STD_LOGIC_VECTOR (31 downto 0);
        size_op1 : IN STD_LOGIC_VECTOR (7 downto 0);
        size_op2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component approx_add IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (31 downto 0);
        b : IN STD_LOGIC_VECTOR (31 downto 0);
        approx_add_size : IN STD_LOGIC_VECTOR (7 downto 0);
        add_sub : IN STD_LOGIC_VECTOR (0 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component riscv_core_sdiv_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component riscv_core_udiv_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component datapath_inst_mem IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component datapath_rf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component datapath_mem IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    inst_mem_U : component datapath_inst_mem
    generic map (
        DataWidth => 32,
        AddressRange => 599,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inst_mem_address0,
        ce0 => inst_mem_ce0,
        q0 => inst_mem_q0);

    rf_U : component datapath_rf
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rf_address0,
        ce0 => rf_ce0,
        we0 => rf_we0,
        d0 => rf_d0,
        q0 => rf_q0,
        address1 => rf_address1,
        ce1 => rf_ce1,
        we1 => rf_we1,
        d1 => rf_d1,
        q1 => rf_q1);

    mem_U : component datapath_mem
    generic map (
        DataWidth => 8,
        AddressRange => 92160,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mem_address0,
        ce0 => mem_ce0,
        we0 => mem_we0,
        d0 => mem_d0,
        q0 => mem_q0,
        address1 => mem_address1,
        ce1 => mem_ce1,
        we1 => mem_we1,
        d1 => mem_d1,
        q1 => mem_q1);

    grp_alu_fu_501 : component alu
    port map (
        ap_ready => grp_alu_fu_501_ap_ready,
        op_1 => op_1_reg_1591,
        op_2 => grp_alu_fu_501_op_2,
        ftype => imm3_reg_1552,
        func7 => grp_alu_fu_501_func7,
        ap_return => grp_alu_fu_501_ap_return);

    grp_approx_mul_fu_509 : component approx_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_approx_mul_fu_509_ap_start,
        ap_done => grp_approx_mul_fu_509_ap_done,
        ap_idle => grp_approx_mul_fu_509_ap_idle,
        ap_ready => grp_approx_mul_fu_509_ap_ready,
        opA => res_7_reg_1776,
        opB => res_8_reg_1781,
        size_op1 => approx_mul_size_op1_reg_1786,
        size_op2 => approx_mul_size_op2_reg_1791,
        ap_return => grp_approx_mul_fu_509_ap_return);

    grp_approx_add_fu_517 : component approx_add
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_approx_add_fu_517_ap_start,
        ap_done => grp_approx_add_fu_517_ap_done,
        ap_idle => grp_approx_add_fu_517_ap_idle,
        ap_ready => grp_approx_add_fu_517_ap_ready,
        a => op_1_reg_1591,
        b => grp_approx_add_fu_517_b,
        approx_add_size => grp_approx_add_fu_517_approx_add_size,
        add_sub => grp_approx_add_fu_517_add_sub,
        ap_return => grp_approx_add_fu_517_ap_return);

    riscv_core_sdiv_3bkb_U13 : component riscv_core_sdiv_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_840_ap_start,
        done => grp_fu_840_ap_done,
        din0 => rf_q0,
        din1 => rf_q1,
        ce => ap_const_logic_1,
        dout => grp_fu_840_p2);

    riscv_core_udiv_3cud_U14 : component riscv_core_udiv_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_846_ap_start,
        done => grp_fu_846_ap_done,
        din0 => rf_q0,
        din1 => rf_q1,
        ce => ap_const_logic_1,
        dout => grp_fu_846_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
                    ap_return_preg <= ap_phi_mux_pc_amount_1_phi_fu_449_p24;
                end if; 
            end if;
        end if;
    end process;


    grp_approx_add_fu_517_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_approx_add_fu_517_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state94))) then 
                    grp_approx_add_fu_517_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_approx_add_fu_517_ap_ready = ap_const_logic_1)) then 
                    grp_approx_add_fu_517_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_approx_mul_fu_509_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_approx_mul_fu_509_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    grp_approx_mul_fu_509_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_approx_mul_fu_509_ap_ready = ap_const_logic_1)) then 
                    grp_approx_mul_fu_509_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    pc_amount_1_reg_445_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_phi_mux_ret_6_i_phi_fu_393_p12 = ap_const_lv1_1))) then 
                pc_amount_1_reg_445 <= pc_amount_3_fu_967_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_phi_mux_ret_6_i_phi_fu_393_p12 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = ap_CS_fsm_state91) and (ap_const_lv7_33 = Opcode_reg_1533)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (((imm3_reg_1552 = ap_const_lv3_3) and (ap_const_lv7_63 = Opcode_reg_1533)) or ((imm3_reg_1552 = ap_const_lv3_2) and (ap_const_lv7_63 = Opcode_reg_1533)))) or (not((ap_const_lv7_3 = Opcode_reg_1533)) and not((ap_const_lv7_67 = Opcode_reg_1533)) and not((ap_const_lv7_17 = Opcode_reg_1533)) and not((ap_const_lv7_37 = Opcode_reg_1533)) and not((ap_const_lv7_13 = Opcode_reg_1533)) and not((ap_const_lv7_23 = Opcode_reg_1533)) and not((ap_const_lv7_63 = Opcode_reg_1533)) and not((ap_const_lv7_6F = Opcode_reg_1533)) and not((ap_const_lv7_33 = Opcode_reg_1533)) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_17 = Opcode_reg_1533)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_37 = Opcode_reg_1533)))) then 
                pc_amount_1_reg_445 <= ap_const_lv32_4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_6F = Opcode_reg_1533))) then 
                pc_amount_1_reg_445 <= jal_imm_3_fu_750_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                pc_amount_1_reg_445 <= pc_amount_2_fu_874_p2;
            end if; 
        end if;
    end process;

    ret1_i_reg_407_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_686_p2 = ap_const_lv1_0) and (tmp_1_reg_1567 = ap_const_lv7_41) and (ap_const_lv7_33 = Opcode_reg_1533))) then 
                ret1_i_reg_407 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                ret1_i_reg_407 <= res_9_reg_1796;
            end if; 
        end if;
    end process;

    ret4_i_reg_419_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((imm3_reg_1552 = ap_const_lv3_5) and (ap_const_logic_1 = ap_CS_fsm_state3) and (grp_fu_562_p2 = ap_const_lv1_1) and (tmp_1_reg_1567 = ap_const_lv7_1) and (ap_const_lv7_33 = Opcode_reg_1533))) then 
                ret4_i_reg_419 <= ap_const_lv32_FFFFFFFF;
            elsif (((imm3_reg_1552 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state3) and (grp_fu_562_p2 = ap_const_lv1_1) and (tmp_1_reg_1567 = ap_const_lv7_1) and (ap_const_lv7_33 = Opcode_reg_1533))) then 
                ret4_i_reg_419 <= ap_const_lv32_7FFFFFFF;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
                ret4_i_reg_419 <= grp_fu_846_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                ret4_i_reg_419 <= grp_fu_840_p2;
            elsif (((imm3_reg_1552 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state90))) then 
                ret4_i_reg_419 <= ret_reg_1816;
            elsif (((imm3_reg_1552 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state90))) then 
                ret4_i_reg_419 <= ret_6_fu_1403_p3;
            elsif ((not((imm3_reg_1552 = ap_const_lv3_0)) and not((imm3_reg_1552 = ap_const_lv3_1)) and not((imm3_reg_1552 = ap_const_lv3_4)) and not((imm3_reg_1552 = ap_const_lv3_5)) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_1_reg_1567 = ap_const_lv7_1) and (ap_const_lv7_33 = Opcode_reg_1533))) then 
                ret4_i_reg_419 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    ret_1_i_reg_484_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_approx_add_fu_517_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state98)) or ((grp_approx_add_fu_517_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state95)))) then 
                ret_1_i_reg_484 <= grp_approx_add_fu_517_ap_return;
            elsif (((not((tmp_1_reg_1567 = ap_const_lv7_1)) and not((tmp_1_reg_1567 = ap_const_lv7_41)) and (ap_const_logic_1 = ap_CS_fsm_state3) and (grp_fu_528_p3 = ap_const_lv1_1) and (tmp_2_fu_686_p2 = ap_const_lv1_0) and (ap_const_lv7_33 = Opcode_reg_1533)) or (not((tmp_1_reg_1567 = ap_const_lv7_40)) and not((tmp_1_reg_1567 = ap_const_lv7_1)) and not((tmp_1_reg_1567 = ap_const_lv7_60)) and not((tmp_1_reg_1567 = ap_const_lv7_41)) and (ap_const_logic_1 = ap_CS_fsm_state3) and (grp_fu_528_p3 = ap_const_lv1_1) and (tmp_2_fu_686_p2 = ap_const_lv1_1) and (ap_const_lv7_33 = Opcode_reg_1533)))) then 
                ret_1_i_reg_484 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    ret_6_i_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_63 = Opcode_reg_1533))) then
                if ((imm3_reg_1552 = ap_const_lv3_0)) then 
                    ret_6_i_reg_390 <= tmp_i5_fu_786_p2;
                elsif ((imm3_reg_1552 = ap_const_lv3_1)) then 
                    ret_6_i_reg_390 <= not_2_i_fu_780_p2;
                elsif ((imm3_reg_1552 = ap_const_lv3_4)) then 
                    ret_6_i_reg_390 <= grp_fu_541_p2;
                elsif ((imm3_reg_1552 = ap_const_lv3_5)) then 
                    ret_6_i_reg_390 <= rev2_fu_774_p2;
                elsif ((imm3_reg_1552 = ap_const_lv3_6)) then 
                    ret_6_i_reg_390 <= grp_fu_535_p2;
                elsif ((imm3_reg_1552 = ap_const_lv3_7)) then 
                    ret_6_i_reg_390 <= rev3_fu_768_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                Opcode_reg_1533 <= Opcode_fu_609_p1;
                Rd_reg_1537 <= inst_mem_q0(11 downto 7);
                imm3_reg_1552 <= inst_mem_q0(14 downto 12);
                instruction_reg_1520 <= inst_mem_q0;
                tmp_1_reg_1567 <= inst_mem_q0(31 downto 25);
                tmp_36_cast_reg_1562 <= inst_mem_q0(31 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                addr_assign_1_reg_1718 <= addr_assign_1_fu_1045_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_23 = Opcode_reg_1533))) then
                addr_assign_reg_1674 <= addr_assign_fu_802_p2;
                addr_s_reg_1681 <= addr_s_fu_808_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state96)) then
                approx_add_size_reg_1831 <= approx_add_size_fu_1495_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                approx_mul_size_op1_reg_1786 <= approx_mul_size_op1_fu_1293_p3;
                approx_mul_size_op2_reg_1791 <= approx_mul_size_op2_fu_1325_p3;
                res_7_reg_1776 <= res_7_fu_1249_p3;
                res_8_reg_1781 <= res_8_fu_1262_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_imm_reg_1584 <= i_imm_fu_683_p1;
                op_1_reg_1591 <= rf_q0;
                op_2_reg_1610 <= rf_q1;
                tmp_2_reg_1633 <= tmp_2_fu_686_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_13 = Opcode_reg_1533))) then
                imm7_reg_1688 <= imm7_fu_827_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                mem_load_1_reg_1740 <= mem_q0;
                mem_load_reg_1734 <= mem_q1;
                newSel4_reg_1771 <= newSel4_fu_1179_p3;
                newSel_reg_1766 <= newSel_fu_1157_p3;
                sel_tmp4_i_reg_1755 <= sel_tmp4_i_fu_1127_p2;
                sel_tmp8_i_reg_1760 <= sel_tmp8_i_fu_1132_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_fu_528_p3 = ap_const_lv1_1) and (tmp_2_fu_686_p2 = ap_const_lv1_1) and (tmp_1_reg_1567 = ap_const_lv7_60) and (ap_const_lv7_33 = Opcode_reg_1533)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_686_p2 = ap_const_lv1_1) and (tmp_1_reg_1567 = ap_const_lv7_41) and (ap_const_lv7_33 = Opcode_reg_1533)))) then
                reg_583 <= grp_fu_556_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_588 <= grp_alu_fu_501_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_approx_mul_fu_509_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                res_9_reg_1796 <= res_9_fu_1375_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_686_p2 = ap_const_lv1_1) and (tmp_1_reg_1567 = ap_const_lv7_41) and (ap_const_lv7_33 = Opcode_reg_1533))) then
                res_reg_1693 <= res_fu_834_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((imm3_reg_1552 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state89))) then
                ret_reg_1816 <= ret_fu_1399_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((tmp_1_reg_1567 = ap_const_lv7_1)) and not((tmp_1_reg_1567 = ap_const_lv7_41)) and (ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_33 = Opcode_reg_1533))) then
                tmp_25_reg_1704 <= instruction_reg_1520(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((imm3_reg_1552 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state89))) then
                tmp_36_reg_1811 <= tmp_i_fu_1387_p2(31 downto 31);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, Opcode_reg_1533, tmp_1_reg_1567, tmp_2_fu_686_p2, grp_fu_528_p3, imm3_reg_1552, ap_CS_fsm_state16, grp_approx_mul_fu_509_ap_done, ap_CS_fsm_state95, grp_approx_add_fu_517_ap_done, ap_CS_fsm_state98, grp_fu_562_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if ((not((tmp_1_reg_1567 = ap_const_lv7_1)) and not((tmp_1_reg_1567 = ap_const_lv7_41)) and (ap_const_logic_1 = ap_CS_fsm_state3) and (grp_fu_528_p3 = ap_const_lv1_1) and (tmp_2_fu_686_p2 = ap_const_lv1_1) and (tmp_1_reg_1567 = ap_const_lv7_40) and (ap_const_lv7_33 = Opcode_reg_1533))) then
                    ap_NS_fsm <= ap_ST_fsm_state96;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_fu_528_p3 = ap_const_lv1_1) and (tmp_2_fu_686_p2 = ap_const_lv1_1) and (tmp_1_reg_1567 = ap_const_lv7_60) and (ap_const_lv7_33 = Opcode_reg_1533))) then
                    ap_NS_fsm <= ap_ST_fsm_state94;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and ((not((tmp_1_reg_1567 = ap_const_lv7_40)) and not((tmp_1_reg_1567 = ap_const_lv7_1)) and not((tmp_1_reg_1567 = ap_const_lv7_60)) and not((tmp_1_reg_1567 = ap_const_lv7_41)) and (grp_fu_528_p3 = ap_const_lv1_1) and (ap_const_lv7_33 = Opcode_reg_1533)) or (not((tmp_1_reg_1567 = ap_const_lv7_1)) and not((tmp_1_reg_1567 = ap_const_lv7_41)) and (grp_fu_528_p3 = ap_const_lv1_1) and (tmp_2_fu_686_p2 = ap_const_lv1_0) and (ap_const_lv7_33 = Opcode_reg_1533))))) then
                    ap_NS_fsm <= ap_ST_fsm_state99;
                elsif ((not((tmp_1_reg_1567 = ap_const_lv7_1)) and not((tmp_1_reg_1567 = ap_const_lv7_41)) and (ap_const_logic_1 = ap_CS_fsm_state3) and (grp_fu_528_p3 = ap_const_lv1_0) and (ap_const_lv7_33 = Opcode_reg_1533))) then
                    ap_NS_fsm <= ap_ST_fsm_state92;
                elsif (((grp_fu_562_p2 = ap_const_lv1_0) and (imm3_reg_1552 = ap_const_lv3_5) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_1_reg_1567 = ap_const_lv7_1) and (ap_const_lv7_33 = Opcode_reg_1533))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                elsif (((grp_fu_562_p2 = ap_const_lv1_0) and (imm3_reg_1552 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_1_reg_1567 = ap_const_lv7_1) and (ap_const_lv7_33 = Opcode_reg_1533))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (((imm3_reg_1552 = ap_const_lv3_0) and (tmp_1_reg_1567 = ap_const_lv7_1) and (ap_const_lv7_33 = Opcode_reg_1533)) or ((imm3_reg_1552 = ap_const_lv3_1) and (tmp_1_reg_1567 = ap_const_lv7_1) and (ap_const_lv7_33 = Opcode_reg_1533))))) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_686_p2 = ap_const_lv1_0) and (tmp_1_reg_1567 = ap_const_lv7_41) and (ap_const_lv7_33 = Opcode_reg_1533))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_686_p2 = ap_const_lv1_1) and (tmp_1_reg_1567 = ap_const_lv7_41) and (ap_const_lv7_33 = Opcode_reg_1533))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (((imm3_reg_1552 = ap_const_lv3_0) and (ap_const_lv7_23 = Opcode_reg_1533)) or ((imm3_reg_1552 = ap_const_lv3_1) and (ap_const_lv7_23 = Opcode_reg_1533))))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif ((not((imm3_reg_1552 = ap_const_lv3_2)) and not((imm3_reg_1552 = ap_const_lv3_0)) and not((imm3_reg_1552 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_23 = Opcode_reg_1533))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif (((imm3_reg_1552 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_23 = Opcode_reg_1533))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (((imm3_reg_1552 = ap_const_lv3_0) and (ap_const_lv7_63 = Opcode_reg_1533)) or ((imm3_reg_1552 = ap_const_lv3_1) and (ap_const_lv7_63 = Opcode_reg_1533)) or ((imm3_reg_1552 = ap_const_lv3_4) and (ap_const_lv7_63 = Opcode_reg_1533)) or ((imm3_reg_1552 = ap_const_lv3_5) and (ap_const_lv7_63 = Opcode_reg_1533)) or ((imm3_reg_1552 = ap_const_lv3_6) and (ap_const_lv7_63 = Opcode_reg_1533)) or ((imm3_reg_1552 = ap_const_lv3_7) and (ap_const_lv7_63 = Opcode_reg_1533))))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and ((ap_const_lv7_17 = Opcode_reg_1533) or (ap_const_lv7_37 = Opcode_reg_1533) or (ap_const_lv7_6F = Opcode_reg_1533) or (not((ap_const_lv7_3 = Opcode_reg_1533)) and not((ap_const_lv7_67 = Opcode_reg_1533)) and not((ap_const_lv7_13 = Opcode_reg_1533)) and not((ap_const_lv7_23 = Opcode_reg_1533)) and not((ap_const_lv7_63 = Opcode_reg_1533)) and not((ap_const_lv7_33 = Opcode_reg_1533))) or ((imm3_reg_1552 = ap_const_lv3_3) and (ap_const_lv7_63 = Opcode_reg_1533)) or ((imm3_reg_1552 = ap_const_lv3_2) and (ap_const_lv7_63 = Opcode_reg_1533)) or (not((imm3_reg_1552 = ap_const_lv3_0)) and not((imm3_reg_1552 = ap_const_lv3_1)) and not((imm3_reg_1552 = ap_const_lv3_4)) and not((imm3_reg_1552 = ap_const_lv3_5)) and (tmp_1_reg_1567 = ap_const_lv7_1) and (ap_const_lv7_33 = Opcode_reg_1533)) or ((imm3_reg_1552 = ap_const_lv3_4) and (grp_fu_562_p2 = ap_const_lv1_1) and (tmp_1_reg_1567 = ap_const_lv7_1) and (ap_const_lv7_33 = Opcode_reg_1533)) or ((imm3_reg_1552 = ap_const_lv3_5) and (grp_fu_562_p2 = ap_const_lv1_1) and (tmp_1_reg_1567 = ap_const_lv7_1) and (ap_const_lv7_33 = Opcode_reg_1533))))) then
                    ap_NS_fsm <= ap_ST_fsm_state91;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_13 = Opcode_reg_1533))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_3 = Opcode_reg_1533))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((grp_approx_mul_fu_509_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                if (((grp_approx_add_fu_517_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state95))) then
                    ap_NS_fsm <= ap_ST_fsm_state99;
                else
                    ap_NS_fsm <= ap_ST_fsm_state95;
                end if;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                if (((grp_approx_add_fu_517_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state98))) then
                    ap_NS_fsm <= ap_ST_fsm_state99;
                else
                    ap_NS_fsm <= ap_ST_fsm_state98;
                end if;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Opcode_fu_609_p1 <= inst_mem_q0(7 - 1 downto 0);
    Rs1_fu_633_p4 <= inst_mem_q0(19 downto 15);
    Rs2_fu_653_p4 <= inst_mem_q0(24 downto 20);
    addr_assign_1_fu_1045_p2 <= std_logic_vector(unsigned(op_1_reg_1591) + unsigned(i_imm_reg_1584));
    addr_assign_fu_802_p0 <= rf_q0;
    addr_assign_fu_802_p2 <= std_logic_vector(signed(addr_assign_fu_802_p0) + signed(s_imm_fu_798_p1));
    addr_s_1_fu_1049_p2 <= std_logic_vector(unsigned(addr_assign_1_fu_1045_p2) + unsigned(ap_const_lv32_FFFF6000));
    addr_s_fu_808_p2 <= std_logic_vector(unsigned(addr_assign_fu_802_p2) + unsigned(ap_const_lv32_FFFF6000));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state91)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state91) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_pc_amount_1_phi_fu_449_p24_assign_proc : process(Opcode_reg_1533, pc_amount_1_reg_445, ap_CS_fsm_state91)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state91) and (ap_const_lv7_33 = Opcode_reg_1533))) then 
            ap_phi_mux_pc_amount_1_phi_fu_449_p24 <= ap_const_lv32_4;
        else 
            ap_phi_mux_pc_amount_1_phi_fu_449_p24 <= pc_amount_1_reg_445;
        end if; 
    end process;

    ap_phi_mux_ret_6_i_phi_fu_393_p12 <= ret_6_i_reg_390;

    ap_ready_assign_proc : process(ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_pc_amount_1_phi_fu_449_p24, ap_CS_fsm_state91, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            ap_return <= ap_phi_mux_pc_amount_1_phi_fu_449_p24;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    approx_add_size_fu_1495_p3 <= 
        ap_const_lv8_0 when (tmp_39_fu_1489_p2(0) = '1') else 
        p_op8_i_fu_1483_p2;
    approx_mul_size_op1_fu_1293_p3 <= 
        ap_const_lv8_0 when (tmp_i4_i_i_fu_1269_p2(0) = '1') else 
        phitmp_op_fu_1287_p2;
    approx_mul_size_op2_fu_1325_p3 <= 
        ap_const_lv8_0 when (tmp_i5_i_i_fu_1301_p2(0) = '1') else 
        phitmp1_op_fu_1319_p2;

    grp_alu_fu_501_func7_assign_proc : process(tmp_1_reg_1567, ap_CS_fsm_state12, ap_CS_fsm_state92, imm7_reg_1688)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            grp_alu_fu_501_func7 <= tmp_1_reg_1567;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_alu_fu_501_func7 <= imm7_reg_1688;
        else 
            grp_alu_fu_501_func7 <= "XXXXXXX";
        end if; 
    end process;


    grp_alu_fu_501_op_2_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state92, i_imm_reg_1584, op_2_reg_1610)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            grp_alu_fu_501_op_2 <= op_2_reg_1610;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_alu_fu_501_op_2 <= i_imm_reg_1584;
        else 
            grp_alu_fu_501_op_2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_approx_add_fu_517_add_sub_assign_proc : process(ap_CS_fsm_state95, ap_CS_fsm_state98)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            grp_approx_add_fu_517_add_sub <= ap_const_lv1_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            grp_approx_add_fu_517_add_sub <= ap_const_lv1_1;
        else 
            grp_approx_add_fu_517_add_sub <= "X";
        end if; 
    end process;

    grp_approx_add_fu_517_ap_start <= grp_approx_add_fu_517_ap_start_reg;

    grp_approx_add_fu_517_approx_add_size_assign_proc : process(ap_CS_fsm_state95, approx_add_size_reg_1831, ap_CS_fsm_state98)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            grp_approx_add_fu_517_approx_add_size <= approx_add_size_reg_1831;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            grp_approx_add_fu_517_approx_add_size <= ap_const_lv8_20;
        else 
            grp_approx_add_fu_517_approx_add_size <= "XXXXXXXX";
        end if; 
    end process;


    grp_approx_add_fu_517_b_assign_proc : process(reg_583, op_2_reg_1610, ap_CS_fsm_state95, ap_CS_fsm_state98)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            grp_approx_add_fu_517_b <= op_2_reg_1610;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            grp_approx_add_fu_517_b <= reg_583;
        else 
            grp_approx_add_fu_517_b <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_approx_mul_fu_509_ap_start <= grp_approx_mul_fu_509_ap_start_reg;
    grp_fu_528_p3 <= instruction_reg_1520(31 downto 31);

    grp_fu_535_p0_assign_proc : process(rf_q0, ap_CS_fsm_state3, Opcode_reg_1533, imm3_reg_1552, op_1_reg_1591, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_fu_535_p0 <= op_1_reg_1591;
        elsif ((((imm3_reg_1552 = ap_const_lv3_6) and (ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_63 = Opcode_reg_1533)) or ((imm3_reg_1552 = ap_const_lv3_7) and (ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_63 = Opcode_reg_1533)))) then 
            grp_fu_535_p0 <= rf_q0;
        else 
            grp_fu_535_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_535_p1_assign_proc : process(rf_q1, ap_CS_fsm_state3, Opcode_reg_1533, imm3_reg_1552, op_2_reg_1610, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_fu_535_p1 <= op_2_reg_1610;
        elsif ((((imm3_reg_1552 = ap_const_lv3_6) and (ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_63 = Opcode_reg_1533)) or ((imm3_reg_1552 = ap_const_lv3_7) and (ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_63 = Opcode_reg_1533)))) then 
            grp_fu_535_p1 <= rf_q1;
        else 
            grp_fu_535_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_535_p2 <= "1" when (unsigned(grp_fu_535_p0) < unsigned(grp_fu_535_p1)) else "0";
    grp_fu_541_p0 <= rf_q0;
    grp_fu_541_p1 <= rf_q1;
    grp_fu_541_p2 <= "1" when (signed(grp_fu_541_p0) < signed(grp_fu_541_p1)) else "0";
    grp_fu_547_p4 <= instruction_reg_1520(31 downto 12);
    grp_fu_556_p1 <= rf_q1;
    grp_fu_556_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(grp_fu_556_p1));

    grp_fu_562_p0_assign_proc : process(rf_q1, ap_CS_fsm_state3, Opcode_reg_1533, tmp_1_reg_1567, imm3_reg_1552, op_2_reg_1610, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_fu_562_p0 <= op_2_reg_1610;
        elsif ((((imm3_reg_1552 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_1_reg_1567 = ap_const_lv7_1) and (ap_const_lv7_33 = Opcode_reg_1533)) or ((imm3_reg_1552 = ap_const_lv3_5) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_1_reg_1567 = ap_const_lv7_1) and (ap_const_lv7_33 = Opcode_reg_1533)))) then 
            grp_fu_562_p0 <= rf_q1;
        else 
            grp_fu_562_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_562_p2 <= "1" when (grp_fu_562_p0 = ap_const_lv32_0) else "0";
    grp_fu_578_p2 <= std_logic_vector(signed(ap_const_lv32_FFFF6001) + signed(addr_assign_reg_1674));

    grp_fu_840_ap_start_assign_proc : process(ap_CS_fsm_state3, Opcode_reg_1533, tmp_1_reg_1567, imm3_reg_1552, grp_fu_562_p2)
    begin
        if (((grp_fu_562_p2 = ap_const_lv1_0) and (imm3_reg_1552 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_1_reg_1567 = ap_const_lv7_1) and (ap_const_lv7_33 = Opcode_reg_1533))) then 
            grp_fu_840_ap_start <= ap_const_logic_1;
        else 
            grp_fu_840_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_846_ap_start_assign_proc : process(ap_CS_fsm_state3, Opcode_reg_1533, tmp_1_reg_1567, imm3_reg_1552, grp_fu_562_p2)
    begin
        if (((grp_fu_562_p2 = ap_const_lv1_0) and (imm3_reg_1552 = ap_const_lv3_5) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_1_reg_1567 = ap_const_lv7_1) and (ap_const_lv7_33 = Opcode_reg_1533))) then 
            grp_fu_846_ap_start <= ap_const_logic_1;
        else 
            grp_fu_846_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        i_imm_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_36_cast_reg_1562),32));

    imm16_1_fu_959_p3 <= (tmp_35_fu_951_p3 & ap_const_lv1_0);
    imm16_fu_914_p5 <= (((grp_fu_528_p3 & tmp_46_fu_907_p3) & tmp_30_fu_898_p4) & tmp_8_i1_cast_fu_889_p4);
    imm7_fu_827_p3 <= 
        ap_const_lv7_0 when (tmp_2_fu_686_p2(0) = '1') else 
        tmp_1_reg_1567;
    inst_mem_address0 <= tmp_s_fu_604_p1(10 - 1 downto 0);

    inst_mem_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            inst_mem_ce0 <= ap_const_logic_1;
        else 
            inst_mem_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    jal_imm_1_fu_734_p7 <= (((((ap_const_lv11_7FF & grp_fu_528_p3) & tmp_16_fu_700_p4) & tmp_20_fu_709_p3) & tmp_22_cast_fu_691_p4) & ap_const_lv1_0);
    jal_imm_3_fu_750_p3 <= 
        jal_imm_1_fu_734_p7 when (grp_fu_528_p3(0) = '1') else 
        jal_imm_cast_fu_730_p1;
    jal_imm_cast_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jal_imm_fu_716_p6),32));
    jal_imm_fu_716_p6 <= ((((grp_fu_528_p3 & tmp_16_fu_700_p4) & tmp_20_fu_709_p3) & tmp_22_cast_fu_691_p4) & ap_const_lv1_0);

    mem_address0_assign_proc : process(imm3_reg_1552, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state7, tmp_8_i_fu_975_p1, ap_CS_fsm_state6, tmp_17_i_fu_999_p1, tmp_2_i_fu_1028_p1, ap_CS_fsm_state8, tmp_9_i_fu_1041_p1, tmp_2_i9_fu_1066_p1, tmp_11_i2_fu_1102_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mem_address0 <= tmp_11_i2_fu_1102_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            mem_address0 <= tmp_2_i9_fu_1066_p1(17 - 1 downto 0);
        elsif (((imm3_reg_1552 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            mem_address0 <= tmp_9_i_fu_1041_p1(17 - 1 downto 0);
        elsif (((imm3_reg_1552 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            mem_address0 <= tmp_2_i_fu_1028_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            mem_address0 <= tmp_17_i_fu_999_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            mem_address0 <= tmp_8_i_fu_975_p1(17 - 1 downto 0);
        else 
            mem_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state7, ap_CS_fsm_state6, tmp_13_i_fu_979_p1, tmp_21_i_fu_1019_p1, ap_CS_fsm_state8, tmp_6_i_fu_1032_p1, tmp_i6_fu_1055_p1, tmp_7_i1_fu_1092_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mem_address1 <= tmp_7_i1_fu_1092_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            mem_address1 <= tmp_i6_fu_1055_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mem_address1 <= tmp_6_i_fu_1032_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            mem_address1 <= tmp_21_i_fu_1019_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            mem_address1 <= tmp_13_i_fu_979_p1(17 - 1 downto 0);
        else 
            mem_address1 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_ce0_assign_proc : process(imm3_reg_1552, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state7, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((imm3_reg_1552 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((imm3_reg_1552 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            mem_ce0 <= ap_const_logic_1;
        else 
            mem_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state7, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            mem_ce1 <= ap_const_logic_1;
        else 
            mem_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mem_d0_assign_proc : process(imm3_reg_1552, op_2_reg_1610, ap_CS_fsm_state7, ap_CS_fsm_state6, ap_CS_fsm_state8, tmp_32_fu_971_p1, tmp_31_fu_1024_p1, tmp_26_fu_1037_p1)
    begin
        if (((imm3_reg_1552 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            mem_d0 <= tmp_26_fu_1037_p1;
        elsif (((imm3_reg_1552 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            mem_d0 <= tmp_31_fu_1024_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            mem_d0 <= op_2_reg_1610(23 downto 16);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            mem_d0 <= tmp_32_fu_971_p1;
        else 
            mem_d0 <= "XXXXXXXX";
        end if; 
    end process;


    mem_d1_assign_proc : process(op_2_reg_1610, ap_CS_fsm_state7, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            mem_d1 <= op_2_reg_1610(31 downto 24);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            mem_d1 <= op_2_reg_1610(15 downto 8);
        else 
            mem_d1 <= "XXXXXXXX";
        end if; 
    end process;


    mem_we0_assign_proc : process(imm3_reg_1552, ap_CS_fsm_state7, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((imm3_reg_1552 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((imm3_reg_1552 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((imm3_reg_1552 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            mem_we0 <= ap_const_logic_1;
        else 
            mem_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_we1_assign_proc : process(imm3_reg_1552, ap_CS_fsm_state7, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((imm3_reg_1552 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((imm3_reg_1552 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            mem_we1 <= ap_const_logic_1;
        else 
            mem_we1 <= ap_const_logic_0;
        end if; 
    end process;

    newSel1_fu_1200_p3 <= 
        ret_1_fu_1187_p1 when (tmp_2_reg_1633(0) = '1') else 
        ret_3_fu_1190_p5;
    newSel2_fu_1165_p3 <= 
        ret_i7_cast_fu_1071_p1 when (sel_tmp2_i_fu_1122_p2(0) = '1') else 
        tmp_i1_fu_1075_p3;
    newSel3_fu_1211_p3 <= 
        newSel_reg_1766 when (sel_tmp8_i_reg_1760(0) = '1') else 
        newSel1_fu_1200_p3;
    newSel45_cast_fu_1222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newSel4_reg_1771),32));
    newSel4_fu_1179_p3 <= 
        newSel2_fu_1165_p3 when (or_cond1_fu_1173_p2(0) = '1') else 
        ap_const_lv16_0;
    newSel_fu_1157_p3 <= 
        ret_2_fu_1083_p1 when (sel_tmp13_i_fu_1151_p2(0) = '1') else 
        ret_4_fu_1107_p4;
    not_2_i_fu_780_p0 <= rf_q0;
    not_2_i_fu_780_p1 <= rf_q1;
    not_2_i_fu_780_p2 <= "0" when (not_2_i_fu_780_p0 = not_2_i_fu_780_p1) else "1";
    or_cond1_fu_1173_p2 <= (sel_tmp_i1_fu_1117_p2 or sel_tmp2_i_fu_1122_p2);
    or_cond2_fu_1217_p2 <= (sel_tmp8_i_reg_1760 or or_cond_fu_1207_p2);
    or_cond_fu_1207_p2 <= (tmp_2_reg_1633 or sel_tmp4_i_reg_1755);
    or_cond_i_i_fu_1363_p2 <= (tmp_44_fu_1337_p3 or rev_fu_1357_p2);
    p_op8_i_fu_1483_p2 <= std_logic_vector(unsigned(ap_const_lv8_20) - unsigned(tmp_51_fu_1457_p3));
    pc_amount_2_fu_874_p2 <= std_logic_vector(unsigned(tmp_22_fu_870_p2) + unsigned(i_imm_reg_1584));
        pc_amount_3_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(imm16_1_fu_959_p3),32));

    phitmp1_op_fu_1319_p2 <= std_logic_vector(unsigned(ap_const_lv8_20) - unsigned(tmp_43_fu_1315_p1));
    phitmp_op_fu_1287_p2 <= std_logic_vector(unsigned(ap_const_lv8_20) - unsigned(tmp_42_fu_1283_p1));
    res_5_fu_1369_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(grp_approx_mul_fu_509_ap_return));
    res_7_fu_1249_p3 <= 
        res_reg_1693 when (tmp_37_fu_1242_p3(0) = '1') else 
        op_1_reg_1591;
    res_8_fu_1262_p3 <= 
        reg_583 when (tmp_38_fu_1255_p3(0) = '1') else 
        op_2_reg_1610;
    res_9_fu_1375_p3 <= 
        grp_approx_mul_fu_509_ap_return when (or_cond_i_i_fu_1363_p2(0) = '1') else 
        res_5_fu_1369_p2;
    res_fu_834_p1 <= rf_q0;
    res_fu_834_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(res_fu_834_p1));
    ret_1_fu_1187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mem_load_reg_1734),32));
    ret_2_fu_1083_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i1_fu_1075_p3),32));
    ret_3_fu_1190_p5 <= (((mem_q1 & mem_q0) & mem_load_1_reg_1740) & mem_load_reg_1734);
    ret_4_fu_1107_p4 <= ((ap_const_lv16_FFFF & mem_q0) & mem_q1);
    ret_5_fu_1225_p3 <= 
        newSel3_fu_1211_p3 when (or_cond2_fu_1217_p2(0) = '1') else 
        newSel45_cast_fu_1222_p1;
    ret_6_fu_1403_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_36_reg_1811(0) = '1') else 
        ap_const_lv32_0;
    ret_fu_1399_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(op_2_reg_1610) * signed('0' &op_1_reg_1591))), 32));
    ret_i7_cast_fu_1071_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mem_q1),16));
    rev1_fu_1145_p2 <= (tmp_17_fu_1137_p3 xor ap_const_lv1_1);
    rev2_fu_774_p2 <= (grp_fu_541_p2 xor ap_const_lv1_1);
    rev3_fu_768_p2 <= (grp_fu_535_p2 xor ap_const_lv1_1);
    rev_fu_1357_p2 <= (tmp_45_fu_1349_p3 xor ap_const_lv1_1);

    rf_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state91, tmp_8_fu_673_p1, tmp_24_fu_885_p1, tmp_14_fu_1234_p1, tmp_10_fu_1238_p1, tmp_40_fu_1410_p1, tmp_41_fu_1503_p1, ap_CS_fsm_state99)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            rf_address0 <= tmp_41_fu_1503_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            rf_address0 <= tmp_40_fu_1410_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            rf_address0 <= tmp_10_fu_1238_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            rf_address0 <= tmp_14_fu_1234_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rf_address0 <= tmp_24_fu_885_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rf_address0 <= tmp_8_fu_673_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            rf_address0 <= ap_const_lv5_0;
        else 
            rf_address0 <= "XXXXX";
        end if; 
    end process;


    rf_address1_assign_proc : process(ap_CS_fsm_state3, Opcode_reg_1533, ap_CS_fsm_state2, tmp_9_fu_678_p1, tmp_21_fu_764_p1, tmp_13_fu_823_p1, tmp_6_fu_866_p1, tmp_29_fu_1383_p1, ap_CS_fsm_state18, tmp_28_fu_1414_p1, ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            rf_address1 <= tmp_28_fu_1414_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            rf_address1 <= tmp_29_fu_1383_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_17 = Opcode_reg_1533))) then 
            rf_address1 <= tmp_6_fu_866_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_37 = Opcode_reg_1533))) then 
            rf_address1 <= tmp_13_fu_823_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_6F = Opcode_reg_1533))) then 
            rf_address1 <= tmp_21_fu_764_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rf_address1 <= tmp_9_fu_678_p1(5 - 1 downto 0);
        else 
            rf_address1 <= "XXXXX";
        end if; 
    end process;


    rf_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state91, ap_CS_fsm_state99)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            rf_ce0 <= ap_const_logic_1;
        else 
            rf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rf_ce1_assign_proc : process(ap_CS_fsm_state3, Opcode_reg_1533, ap_CS_fsm_state2, ap_CS_fsm_state18, ap_CS_fsm_state93)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_17 = Opcode_reg_1533)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_37 = Opcode_reg_1533)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_6F = Opcode_reg_1533)))) then 
            rf_ce1 <= ap_const_logic_1;
        else 
            rf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    rf_d0_assign_proc : process(ap_CS_fsm_state1, reg_588, ap_CS_fsm_state4, ret4_i_reg_419, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state91, ret_1_i_reg_484, ap_CS_fsm_state99, tmp_23_fu_879_p2, ret_5_fu_1225_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            rf_d0 <= ret_1_i_reg_484;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            rf_d0 <= ret4_i_reg_419;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            rf_d0 <= reg_588;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            rf_d0 <= ret_5_fu_1225_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rf_d0 <= tmp_23_fu_879_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            rf_d0 <= ap_const_lv32_0;
        else 
            rf_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rf_d1_assign_proc : process(ap_CS_fsm_state3, Opcode_reg_1533, reg_588, ret1_i_reg_407, ap_CS_fsm_state18, ap_CS_fsm_state93, tmp_18_fu_758_p2, tmp_12_fu_814_p3, tmp_5_fu_860_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            rf_d1 <= reg_588;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            rf_d1 <= ret1_i_reg_407;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_17 = Opcode_reg_1533))) then 
            rf_d1 <= tmp_5_fu_860_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_37 = Opcode_reg_1533))) then 
            rf_d1 <= tmp_12_fu_814_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_6F = Opcode_reg_1533))) then 
            rf_d1 <= tmp_18_fu_758_p2;
        else 
            rf_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rf_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, Opcode_reg_1533, tmp_1_reg_1567, tmp_25_reg_1704, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state91, ap_CS_fsm_state99)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state99) and (tmp_25_reg_1704 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state91) and (tmp_1_reg_1567 = ap_const_lv7_1) and (ap_const_lv7_33 = Opcode_reg_1533)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            rf_we0 <= ap_const_logic_1;
        else 
            rf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rf_we1_assign_proc : process(ap_CS_fsm_state3, Opcode_reg_1533, ap_CS_fsm_state18, ap_CS_fsm_state93)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_17 = Opcode_reg_1533)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_37 = Opcode_reg_1533)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv7_6F = Opcode_reg_1533)))) then 
            rf_we1 <= ap_const_logic_1;
        else 
            rf_we1 <= ap_const_logic_0;
        end if; 
    end process;

        s_imm_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_fu_792_p3),32));

    sel_tmp13_i_fu_1151_p2 <= (sel_tmp8_i_fu_1132_p2 and rev1_fu_1145_p2);
    sel_tmp1_i_fu_1443_p2 <= (sel_tmp_i_fu_1437_p2 and grp_fu_535_p2);
    sel_tmp2_i_fu_1122_p2 <= "1" when (imm3_reg_1552 = ap_const_lv3_4) else "0";
    sel_tmp3_i_fu_1465_p2 <= (grp_fu_562_p2 and grp_fu_535_p2);
    sel_tmp4_i_fu_1127_p2 <= "1" when (imm3_reg_1552 = ap_const_lv3_2) else "0";
    sel_tmp5_i_fu_1471_p2 <= (grp_fu_535_p2 xor ap_const_lv1_1);
    sel_tmp6_i_fu_1477_p2 <= (tmp_i1_i_fu_1418_p2 and sel_tmp5_i_fu_1471_p2);
    sel_tmp8_i_fu_1132_p2 <= "1" when (imm3_reg_1552 = ap_const_lv3_1) else "0";
    sel_tmp_i1_fu_1117_p2 <= "1" when (imm3_reg_1552 = ap_const_lv3_5) else "0";
    sel_tmp_i_fu_1437_p2 <= (grp_fu_562_p2 xor ap_const_lv1_1);
    tmp_10_fu_1238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Rd_reg_1537),64));
    tmp_10_i2_fu_1097_p2 <= std_logic_vector(unsigned(addr_assign_1_reg_1718) + unsigned(ap_const_lv32_FFFF6002));
        tmp_11_i2_fu_1102_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_i2_fu_1097_p2),64));

    tmp_12_fu_814_p3 <= (grp_fu_547_p4 & ap_const_lv12_0);
    tmp_13_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Rd_reg_1537),64));
        tmp_13_i_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_578_p2),64));

    tmp_14_fu_1234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Rd_reg_1537),64));
    tmp_15_fu_792_p3 <= (tmp_1_reg_1567 & Rd_reg_1537);
    tmp_16_fu_700_p4 <= instruction_reg_1520(19 downto 12);
    tmp_16_i_fu_994_p2 <= std_logic_vector(signed(ap_const_lv32_FFFF6002) + signed(addr_assign_reg_1674));
    tmp_17_fu_1137_p3 <= mem_q0(7 downto 7);
        tmp_17_i_fu_999_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_i_fu_994_p2),64));

    tmp_18_fu_758_p2 <= std_logic_vector(unsigned(ap_const_lv32_4) + unsigned(PC));
    tmp_1_i8_fu_1060_p2 <= std_logic_vector(unsigned(addr_assign_1_fu_1045_p2) + unsigned(ap_const_lv32_FFFF6001));
    tmp_20_fu_709_p3 <= instruction_reg_1520(20 downto 20);
    tmp_20_i_fu_1014_p2 <= std_logic_vector(signed(ap_const_lv32_FFFF6003) + signed(addr_assign_reg_1674));
    tmp_21_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Rd_reg_1537),64));
        tmp_21_i_fu_1019_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_20_i_fu_1014_p2),64));

    tmp_22_cast_fu_691_p4 <= instruction_reg_1520(30 downto 21);
    tmp_22_fu_870_p2 <= std_logic_vector(unsigned(op_1_reg_1591) - unsigned(PC));
    tmp_23_fu_879_p2 <= std_logic_vector(unsigned(PC) + unsigned(ap_const_lv32_4));
    tmp_24_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Rd_reg_1537),64));
    tmp_26_fu_1037_p1 <= op_2_reg_1610(8 - 1 downto 0);
    tmp_28_fu_1414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Rd_reg_1537),64));
    tmp_29_fu_1383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Rd_reg_1537),64));
    tmp_2_fu_686_p2 <= "1" when (imm3_reg_1552 = ap_const_lv3_0) else "0";
        tmp_2_i9_fu_1066_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_i8_fu_1060_p2),64));

        tmp_2_i_fu_1028_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(addr_s_reg_1681),64));

    tmp_30_fu_898_p4 <= instruction_reg_1520(30 downto 25);
    tmp_31_fu_1024_p1 <= op_2_reg_1610(8 - 1 downto 0);
    tmp_32_fu_971_p1 <= op_2_reg_1610(8 - 1 downto 0);
    tmp_33_fu_933_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(imm16_fu_914_p5),15));
    tmp_34_fu_937_p6 <= ((((ap_const_lv3_7 & grp_fu_528_p3) & tmp_46_fu_907_p3) & tmp_30_fu_898_p4) & tmp_8_i1_cast_fu_889_p4);
    tmp_35_fu_951_p3 <= 
        tmp_34_fu_937_p6 when (tmp_48_fu_926_p3(0) = '1') else 
        tmp_33_fu_933_p1;
    tmp_37_fu_1242_p3 <= op_1_reg_1591(31 downto 31);
    tmp_38_fu_1255_p3 <= op_2_reg_1610(31 downto 31);
    tmp_39_fu_1489_p2 <= (sel_tmp6_i_fu_1477_p2 or sel_tmp3_i_fu_1465_p2);
    tmp_40_fu_1410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Rd_reg_1537),64));
    tmp_41_fu_1503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Rd_reg_1537),64));
    tmp_42_fu_1283_p1 <= tmp_i_i_i_fu_1275_p3(8 - 1 downto 0);
    tmp_43_fu_1315_p1 <= tmp_i6_i_i_fu_1307_p3(8 - 1 downto 0);
    tmp_44_fu_1337_p3 <= tmp_6_i_i_fu_1333_p2(31 downto 31);
    tmp_45_fu_1349_p3 <= tmp_8_i_i_fu_1345_p2(31 downto 31);
    tmp_46_fu_907_p3 <= instruction_reg_1520(7 downto 7);
    tmp_48_fu_926_p3 <= instruction_reg_1520(31 downto 31);
    tmp_49_fu_1449_p1 <= tmp_i_i3_fu_1423_p3(8 - 1 downto 0);
    tmp_4_fu_852_p3 <= (grp_fu_547_p4 & ap_const_lv12_0);
    tmp_50_fu_1453_p1 <= tmp_i2_i_fu_1430_p3(8 - 1 downto 0);
    tmp_51_fu_1457_p3 <= 
        tmp_49_fu_1449_p1 when (sel_tmp1_i_fu_1443_p2(0) = '1') else 
        tmp_50_fu_1453_p1;
    tmp_5_fu_860_p2 <= std_logic_vector(unsigned(tmp_4_fu_852_p3) + unsigned(PC));
    tmp_6_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Rd_reg_1537),64));
    tmp_6_i1_fu_1087_p2 <= std_logic_vector(unsigned(addr_assign_1_reg_1718) + unsigned(ap_const_lv32_FFFF6003));
        tmp_6_i_fu_1032_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_578_p2),64));

    tmp_6_i_i_fu_1333_p2 <= (op_2_reg_1610 and op_1_reg_1591);
        tmp_7_i1_fu_1092_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_i1_fu_1087_p2),64));

    tmp_8_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Rs1_fu_633_p4),64));
    tmp_8_i1_cast_fu_889_p4 <= instruction_reg_1520(11 downto 8);
        tmp_8_i_fu_975_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(addr_s_reg_1681),64));

    tmp_8_i_i_fu_1345_p2 <= (op_2_reg_1610 or op_1_reg_1591);
    tmp_9_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Rs2_fu_653_p4),64));
        tmp_9_i_fu_1041_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(addr_s_reg_1681),64));

    tmp_fu_594_p4 <= PC(31 downto 2);
    tmp_i1_fu_1075_p3 <= (mem_q0 & mem_q1);
    tmp_i1_i_fu_1418_p2 <= "1" when (op_1_reg_1591 = ap_const_lv32_0) else "0";
    
    tmp_i2_i_fu_1430_p3_proc : process(op_1_reg_1591)
    begin
        tmp_i2_i_fu_1430_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 32 - 1 downto 0 loop
            if op_1_reg_1591(i) = '1' then
                tmp_i2_i_fu_1430_p3 <= std_logic_vector(to_unsigned(32-1-i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_i4_i_i_fu_1269_p2 <= "1" when (res_7_fu_1249_p3 = ap_const_lv32_0) else "0";
    tmp_i5_fu_786_p0 <= rf_q0;
    tmp_i5_fu_786_p1 <= rf_q1;
    tmp_i5_fu_786_p2 <= "1" when (tmp_i5_fu_786_p0 = tmp_i5_fu_786_p1) else "0";
    tmp_i5_i_i_fu_1301_p2 <= "1" when (res_8_fu_1262_p3 = ap_const_lv32_0) else "0";
        tmp_i6_fu_1055_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(addr_s_1_fu_1049_p2),64));

    
    tmp_i6_i_i_fu_1307_p3_proc : process(res_8_fu_1262_p3)
    begin
        tmp_i6_i_i_fu_1307_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 32 - 1 downto 0 loop
            if res_8_fu_1262_p3(i) = '1' then
                tmp_i6_i_i_fu_1307_p3 <= std_logic_vector(to_unsigned(32-1-i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_i_fu_1387_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &op_1_reg_1591) * signed(op_2_reg_1610))), 32));
    
    tmp_i_i3_fu_1423_p3_proc : process(op_2_reg_1610)
    begin
        tmp_i_i3_fu_1423_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 32 - 1 downto 0 loop
            if op_2_reg_1610(i) = '1' then
                tmp_i_i3_fu_1423_p3 <= std_logic_vector(to_unsigned(32-1-i,32));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_i_i_i_fu_1275_p3_proc : process(res_7_fu_1249_p3)
    begin
        tmp_i_i_i_fu_1275_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 32 - 1 downto 0 loop
            if res_7_fu_1249_p3(i) = '1' then
                tmp_i_i_i_fu_1275_p3 <= std_logic_vector(to_unsigned(32-1-i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_s_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_594_p4),64));
end behav;
