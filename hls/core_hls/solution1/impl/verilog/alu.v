// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module alu (
        ap_ready,
        op_1,
        op_2,
        ftype,
        func7,
        ap_return
);


output   ap_ready;
input  [31:0] op_1;
input  [31:0] op_2;
input  [2:0] ftype;
input  [6:0] func7;
output  [31:0] ap_return;

wire   [31:0] ret_11_fu_108_p2;
reg   [31:0] ap_phi_mux_ret_4_phi_fu_63_p26;
wire   [2:0] ftype_read_read_fu_42_p2;
wire   [31:0] ret_2_fu_121_p1;
wire   [31:0] ret_1_fu_132_p1;
wire   [31:0] ret_10_fu_137_p2;
wire   [31:0] ret_9_fu_144_p2;
wire   [31:0] ret_fu_151_p2;
wire   [6:0] func7_read_read_fu_36_p2;
wire   [31:0] ret_13_fu_158_p2;
wire   [31:0] ret_12_fu_165_p2;
wire   [31:0] ret_15_fu_94_p2;
wire   [31:0] ret_14_fu_101_p2;
wire   [0:0] tmp_90_fu_115_p2;
wire   [0:0] tmp_s_fu_126_p2;

always @ (*) begin
    if (((func7_read_read_fu_36_p2 == 7'd0) & (ftype_read_read_fu_42_p2 == 3'd5))) begin
        ap_phi_mux_ret_4_phi_fu_63_p26 = ret_14_fu_101_p2;
    end else if (((func7_read_read_fu_36_p2 == 7'd32) & (ftype_read_read_fu_42_p2 == 3'd5))) begin
        ap_phi_mux_ret_4_phi_fu_63_p26 = ret_15_fu_94_p2;
    end else if (((func7_read_read_fu_36_p2 == 7'd0) & (ftype_read_read_fu_42_p2 == 3'd0))) begin
        ap_phi_mux_ret_4_phi_fu_63_p26 = ret_12_fu_165_p2;
    end else if (((func7_read_read_fu_36_p2 == 7'd32) & (ftype_read_read_fu_42_p2 == 3'd0))) begin
        ap_phi_mux_ret_4_phi_fu_63_p26 = ret_13_fu_158_p2;
    end else if (((~(func7_read_read_fu_36_p2 == 7'd0) & ~(func7_read_read_fu_36_p2 == 7'd32) & (ftype_read_read_fu_42_p2 == 3'd5)) | (~(func7_read_read_fu_36_p2 == 7'd0) & ~(func7_read_read_fu_36_p2 == 7'd32) & (ftype_read_read_fu_42_p2 == 3'd0)))) begin
        ap_phi_mux_ret_4_phi_fu_63_p26 = 32'd0;
    end else if ((ftype_read_read_fu_42_p2 == 3'd4)) begin
        ap_phi_mux_ret_4_phi_fu_63_p26 = ret_fu_151_p2;
    end else if ((ftype_read_read_fu_42_p2 == 3'd6)) begin
        ap_phi_mux_ret_4_phi_fu_63_p26 = ret_9_fu_144_p2;
    end else if ((ftype_read_read_fu_42_p2 == 3'd7)) begin
        ap_phi_mux_ret_4_phi_fu_63_p26 = ret_10_fu_137_p2;
    end else if ((ftype_read_read_fu_42_p2 == 3'd2)) begin
        ap_phi_mux_ret_4_phi_fu_63_p26 = ret_1_fu_132_p1;
    end else if ((ftype_read_read_fu_42_p2 == 3'd3)) begin
        ap_phi_mux_ret_4_phi_fu_63_p26 = ret_2_fu_121_p1;
    end else if ((ftype_read_read_fu_42_p2 == 3'd1)) begin
        ap_phi_mux_ret_4_phi_fu_63_p26 = ret_11_fu_108_p2;
    end else begin
        ap_phi_mux_ret_4_phi_fu_63_p26 = 'bx;
    end
end

assign ap_ready = 1'b1;

assign ap_return = ap_phi_mux_ret_4_phi_fu_63_p26;

assign ftype_read_read_fu_42_p2 = ftype;

assign func7_read_read_fu_36_p2 = func7;

assign ret_10_fu_137_p2 = (op_2 & op_1);

assign ret_11_fu_108_p2 = op_1 << op_2;

assign ret_12_fu_165_p2 = (op_2 + op_1);

assign ret_13_fu_158_p2 = (op_1 - op_2);

assign ret_14_fu_101_p2 = op_1 >> op_2;

assign ret_15_fu_94_p2 = $signed(op_1) >>> op_2;

assign ret_1_fu_132_p1 = tmp_s_fu_126_p2;

assign ret_2_fu_121_p1 = tmp_90_fu_115_p2;

assign ret_9_fu_144_p2 = (op_2 | op_1);

assign ret_fu_151_p2 = (op_2 ^ op_1);

assign tmp_90_fu_115_p2 = ((op_1 < op_2) ? 1'b1 : 1'b0);

assign tmp_s_fu_126_p2 = (($signed(op_1) < $signed(op_2)) ? 1'b1 : 1'b0);

endmodule //alu
