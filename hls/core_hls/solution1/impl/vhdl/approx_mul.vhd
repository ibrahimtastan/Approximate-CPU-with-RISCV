-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity approx_mul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    opA : IN STD_LOGIC_VECTOR (31 downto 0);
    opB : IN STD_LOGIC_VECTOR (31 downto 0);
    size_op1 : IN STD_LOGIC_VECTOR (7 downto 0);
    size_op2 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of approx_mul is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv27_1000000 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_55_fu_162_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_reg_802 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_194_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_reg_807 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_158_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_158_reg_812 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_481_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_481_reg_817 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_504_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_504_reg_822 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_1058_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_1058_reg_827 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_1405_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_1405_reg_832 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_3452_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_3452_reg_837 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_3992_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_3992_reg_843 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_5314_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_5314_reg_849 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_70_reg_854 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_80_reg_860 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_867 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_52_fu_138_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_186_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_154_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_146_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_170_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_fu_178_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_2089_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_827_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_2740_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_280_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_3272_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_2643_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_3383_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_3760_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_3438_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_3974_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_1015_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_4402_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_1219_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp7_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_5458_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_810_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_97_cast_fu_408_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_fu_411_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sig_810_cast_fu_397_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_fu_449_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_89_fu_494_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_fu_473_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_85_fu_466_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_386_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_84_fu_442_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_83_fu_435_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_fu_428_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_501_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_79_fu_401_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_fu_487_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_87_fu_480_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_fu_421_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp26_fu_555_p12 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_45_fu_453_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_90_fu_583_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_46_fu_459_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_49_fu_593_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_48_fu_587_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_50_fu_613_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_51_fu_623_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp32_fu_603_p5 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_61_fu_640_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_59_fu_631_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_63_fu_654_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_62_fu_648_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_43_fu_415_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_91_fu_688_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp34_fu_678_p5 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_66_fu_698_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_65_fu_692_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_67_fu_708_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp35_fu_718_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp30_fu_670_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_68_fu_726_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_64_fu_664_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_69_fu_740_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp23_fu_577_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp33_fu_734_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_72_fu_752_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_71_fu_746_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp29_fu_762_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_fu_510_p24 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp22_fu_770_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_73_fu_776_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_preg <= tmp_73_fu_776_p2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                sig_1058_reg_827 <= sig_1058_fu_238_p2;
                sig_1405_reg_832 <= sig_1405_fu_250_p2;
                sig_158_reg_812 <= sig_158_fu_202_p2;
                sig_3452_reg_837 <= sig_3452_fu_298_p2;
                sig_3992_reg_843 <= sig_3992_fu_316_p2;
                sig_481_reg_817 <= sig_481_fu_214_p2;
                sig_504_reg_822 <= sig_504_fu_220_p2;
                sig_5314_reg_849 <= sig_5314_fu_328_p2;
                tmp_55_reg_802 <= opA(31 downto 31);
                tmp_60_reg_807 <= opB(31 downto 31);
                tmp_70_reg_854 <= opA(18 downto 18);
                tmp_80_reg_860 <= opB(16 downto 16);
                tmp_s_reg_867 <= tmp_s_fu_380_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state2, tmp_73_fu_776_p2, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return <= tmp_73_fu_776_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    sig_1015_fu_232_p2 <= (tmp_58_fu_186_p3 and tmp_55_fu_162_p3);
    sig_1058_fu_238_p2 <= (tmp_57_fu_178_p3 and tmp_54_fu_154_p3);
    sig_1219_fu_244_p2 <= (tmp_60_fu_194_p3 and tmp_54_fu_154_p3);
    sig_1405_fu_250_p2 <= (sig_504_fu_220_p2 or sig_1058_fu_238_p2);
    sig_158_fu_202_p2 <= (tmp_60_fu_194_p3 and tmp_52_fu_138_p3);
    sig_2089_fu_256_p2 <= (sig_504_fu_220_p2 and sig_1058_fu_238_p2);
    sig_2643_fu_268_p2 <= (tmp_58_fu_186_p3 and tmp3_fu_262_p2);
    sig_2740_fu_274_p2 <= (sig_827_fu_226_p2 xor sig_2089_fu_256_p2);
    sig_280_fu_208_p2 <= (tmp_58_fu_186_p3 and tmp_54_fu_154_p3);
    sig_3272_fu_280_p2 <= (sig_280_fu_208_p2 xor sig_2740_fu_274_p2);
    sig_3383_fu_286_p2 <= (sig_280_fu_208_p2 and sig_2740_fu_274_p2);
    sig_3438_fu_292_p2 <= (sig_3272_fu_280_p2 and sig_2643_fu_268_p2);
    sig_3452_fu_298_p2 <= (sig_3383_fu_286_p2 or sig_2089_fu_256_p2);
    sig_3760_fu_304_p2 <= (sig_3272_fu_280_p2 xor sig_2643_fu_268_p2);
    sig_3974_fu_310_p2 <= (sig_481_fu_214_p2 xor sig_3760_fu_304_p2);
    sig_3992_fu_316_p2 <= (sig_481_fu_214_p2 and sig_3760_fu_304_p2);
    sig_4402_fu_322_p2 <= (sig_3992_fu_316_p2 or sig_3438_fu_292_p2);
    sig_481_fu_214_p2 <= (tmp_60_fu_194_p3 and tmp_53_fu_146_p3);
    sig_504_fu_220_p2 <= (tmp_56_fu_170_p3 and tmp_55_fu_162_p3);
    sig_5314_fu_328_p2 <= (sig_3974_fu_310_p2 and sig_158_fu_202_p2);
    sig_5458_fu_352_p2 <= (tmp5_fu_346_p2 xor tmp4_fu_334_p2);
    sig_810_cast_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sig_810_fu_393_p2),32));
    sig_810_fu_393_p2 <= (tmp_60_reg_807 and tmp_55_reg_802);
    sig_827_fu_226_p2 <= (tmp_57_fu_178_p3 and tmp_55_fu_162_p3);
    tmp22_fu_770_p2 <= (tmp8_fu_510_p24 or tmp29_fu_762_p3);
    tmp23_fu_577_p2 <= (tmp26_fu_555_p12 xor ap_const_lv27_1000000);
    tmp26_fu_555_p12 <= ((((((((((tmp_88_fu_487_p3 & tmp_80_reg_860) & sig_158_reg_812) & tmp_87_fu_480_p3) & ap_const_lv7_0) & sig_504_reg_822) & ap_const_lv3_0) & tmp_81_fu_421_p3) & ap_const_lv3_0) & sig_481_reg_817) & ap_const_lv7_0);
    tmp29_fu_762_p3 <= (tmp_72_fu_752_p4 & tmp_71_fu_746_p2);
    tmp30_fu_670_p3 <= (tmp_63_fu_654_p4 & tmp_62_fu_648_p2);
    tmp32_fu_603_p5 <= (((sig_3992_reg_843 & ap_const_lv8_0) & sig_3452_reg_837) & ap_const_lv20_0);
    tmp33_fu_734_p2 <= (tmp35_fu_718_p3 or tmp30_fu_670_p3);
    tmp34_fu_678_p5 <= (((sig_3992_reg_843 & ap_const_lv11_0) & sig_5314_reg_849) & ap_const_lv2_0);
    tmp35_fu_718_p3 <= (tmp_66_fu_698_p4 & tmp_65_fu_692_p2);
    tmp3_fu_262_p2 <= (tmp_53_fu_146_p3 and sig_1405_fu_250_p2);
    tmp4_fu_334_p2 <= (sig_3452_fu_298_p2 xor sig_1015_fu_232_p2);
    tmp5_fu_346_p2 <= (tmp6_fu_340_p2 xor sig_1219_fu_244_p2);
    tmp6_fu_340_p2 <= (sig_5314_fu_328_p2 xor sig_4402_fu_322_p2);
    tmp7_fu_374_p2 <= (sig_3974_fu_310_p2 xor sig_158_fu_202_p2);
    tmp8_fu_510_p24 <= ((((((((((((((((((((((tmp_70_reg_854 & sig_1058_reg_827) & ap_const_lv1_0) & tmp_89_fu_494_p3) & ap_const_lv5_0) & tmp_86_fu_473_p3) & tmp_85_fu_466_p3) & ap_const_lv1_0) & tmp_fu_386_p3) & ap_const_lv2_0) & tmp_84_fu_442_p3) & ap_const_lv2_0) & tmp_83_fu_435_p3) & tmp_82_fu_428_p3) & ap_const_lv2_0) & tmp_47_fu_501_p4) & ap_const_lv2_0) & tmp_80_reg_860) & tmp_80_reg_860) & tmp_79_fu_401_p3) & ap_const_lv1_0) & tmp_70_reg_854) & ap_const_lv1_0);
    tmp_42_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(size_op1),32));
    tmp_43_fu_415_p2 <= std_logic_vector(shift_left(unsigned(tmp_97_cast_fu_408_p1),to_integer(unsigned('0' & tmp_42_fu_411_p1(31-1 downto 0)))));
    tmp_44_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(size_op2),32));
    tmp_45_fu_453_p2 <= std_logic_vector(shift_left(unsigned(sig_810_cast_fu_397_p1),to_integer(unsigned('0' & tmp_44_fu_449_p1(31-1 downto 0)))));
    tmp_46_fu_459_p3 <= (sig_1405_reg_832 & ap_const_lv18_0);
    tmp_47_fu_501_p4 <= opA(8 downto 7);
    tmp_48_fu_587_p2 <= (tmp_90_fu_583_p1 or tmp_46_fu_459_p3);
    tmp_49_fu_593_p4 <= tmp_45_fu_453_p2(29 downto 19);
    tmp_50_fu_613_p4 <= tmp_45_fu_453_p2(26 downto 19);
    tmp_51_fu_623_p3 <= (tmp_49_fu_593_p4 & tmp_48_fu_587_p2);
    tmp_52_fu_138_p3 <= opA(28 downto 28);
    tmp_53_fu_146_p3 <= opA(29 downto 29);
    tmp_54_fu_154_p3 <= opA(30 downto 30);
    tmp_55_fu_162_p3 <= opA(31 downto 31);
    tmp_56_fu_170_p3 <= opB(28 downto 28);
    tmp_57_fu_178_p3 <= opB(29 downto 29);
    tmp_58_fu_186_p3 <= opB(30 downto 30);
    tmp_59_fu_631_p4 <= ((ap_const_lv6_0 & sig_3452_reg_837) & ap_const_lv20_0);
    tmp_60_fu_194_p3 <= opB(31 downto 31);
    tmp_61_fu_640_p3 <= (tmp_50_fu_613_p4 & tmp_48_fu_587_p2);
    tmp_62_fu_648_p2 <= (tmp_51_fu_623_p3 or tmp32_fu_603_p5);
    tmp_63_fu_654_p4 <= tmp_45_fu_453_p2(31 downto 30);
    tmp_64_fu_664_p2 <= (tmp_61_fu_640_p3 or tmp_59_fu_631_p4);
    tmp_65_fu_692_p2 <= (tmp_91_fu_688_p1 or tmp34_fu_678_p5);
    tmp_66_fu_698_p4 <= tmp_43_fu_415_p2(31 downto 15);
    tmp_67_fu_708_p4 <= tmp_43_fu_415_p2(26 downto 15);
    tmp_68_fu_726_p3 <= (tmp_67_fu_708_p4 & tmp_65_fu_692_p2);
    tmp_69_fu_740_p2 <= (tmp_68_fu_726_p3 or tmp_64_fu_664_p2);
    tmp_71_fu_746_p2 <= (tmp_69_fu_740_p2 or tmp23_fu_577_p2);
    tmp_72_fu_752_p4 <= tmp33_fu_734_p2(31 downto 27);
    tmp_73_fu_776_p2 <= (tmp22_fu_770_p2 or ap_const_lv32_40);
    tmp_79_fu_401_p3 <= opA(6 downto 6);
    tmp_81_fu_421_p3 <= opB(3 downto 3);
    tmp_82_fu_428_p3 <= opB(20 downto 20);
    tmp_83_fu_435_p3 <= opA(16 downto 16);
    tmp_84_fu_442_p3 <= opA(25 downto 25);
    tmp_85_fu_466_p3 <= opA(2 downto 2);
    tmp_86_fu_473_p3 <= opA(11 downto 11);
    tmp_87_fu_480_p3 <= opB(9 downto 9);
    tmp_88_fu_487_p3 <= opB(22 downto 22);
    tmp_89_fu_494_p3 <= opB(7 downto 7);
    tmp_90_fu_583_p1 <= tmp_45_fu_453_p2(19 - 1 downto 0);
    tmp_91_fu_688_p1 <= tmp_43_fu_415_p2(15 - 1 downto 0);
    tmp_97_cast_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_867),32));
    tmp_fu_386_p3 <= opA(19 downto 19);
    tmp_s_fu_380_p2 <= (tmp7_fu_374_p2 and sig_5458_fu_352_p2);
end behav;
